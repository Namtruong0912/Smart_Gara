
Test_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003ae0  08003ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b3c  08003b3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003b3c  08003b3c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b3c  08003b3c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b3c  08003b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b40  08003b40  00013b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000010  08003b54  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08003b54  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc3e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a3  00000000  00000000  0002ccba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0002ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e2  00000000  00000000  0002fa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001723d  00000000  00000000  000303ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ec82  00000000  00000000  00047627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086bd8  00000000  00000000  000562a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033fc  00000000  00000000  000dce84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e0280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ac8 	.word	0x08003ac8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003ac8 	.word	0x08003ac8

0800014c <buzzer>:
int overlap_status;
//-----------------------------------------------Các hàm----------------------------------------------------

//----------------------------Buzzer
void buzzer(int n)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	for(i=0; i<n; i++)
 8000154:	4b11      	ldr	r3, [pc, #68]	; (800019c <buzzer+0x50>)
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	e014      	b.n	8000186 <buzzer+0x3a>
	{
		HAL_GPIO_WritePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin, 1);
 800015c:	2201      	movs	r2, #1
 800015e:	2102      	movs	r1, #2
 8000160:	480f      	ldr	r0, [pc, #60]	; (80001a0 <buzzer+0x54>)
 8000162:	f001 fb3a 	bl	80017da <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000166:	20c8      	movs	r0, #200	; 0xc8
 8000168:	f000 ffb8 	bl	80010dc <HAL_Delay>
		HAL_GPIO_WritePin(Buzzer_pin_GPIO_Port, Buzzer_pin_Pin, 0);
 800016c:	2200      	movs	r2, #0
 800016e:	2102      	movs	r1, #2
 8000170:	480b      	ldr	r0, [pc, #44]	; (80001a0 <buzzer+0x54>)
 8000172:	f001 fb32 	bl	80017da <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000176:	20c8      	movs	r0, #200	; 0xc8
 8000178:	f000 ffb0 	bl	80010dc <HAL_Delay>
	for(i=0; i<n; i++)
 800017c:	4b07      	ldr	r3, [pc, #28]	; (800019c <buzzer+0x50>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	3301      	adds	r3, #1
 8000182:	4a06      	ldr	r2, [pc, #24]	; (800019c <buzzer+0x50>)
 8000184:	6013      	str	r3, [r2, #0]
 8000186:	4b05      	ldr	r3, [pc, #20]	; (800019c <buzzer+0x50>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	429a      	cmp	r2, r3
 800018e:	dce5      	bgt.n	800015c <buzzer+0x10>
	}
}
 8000190:	bf00      	nop
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	20000078 	.word	0x20000078
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <save_status_check>:

//----------------------------Kiểm tra xe đã vào chưa
void save_status_check()
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	save_status = 0;
 80001a8:	4b20      	ldr	r3, [pc, #128]	; (800022c <save_status_check+0x88>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
	for(i=0; i<5; i++)
 80001ae:	4b20      	ldr	r3, [pc, #128]	; (8000230 <save_status_check+0x8c>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	e030      	b.n	8000218 <save_status_check+0x74>
	{
		for(j=0; j<9; j++)
 80001b6:	4b1f      	ldr	r3, [pc, #124]	; (8000234 <save_status_check+0x90>)
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	e021      	b.n	8000202 <save_status_check+0x5e>
		{
			if(COM_BUFF[j] != COM_SAVE[i*9 + j]) break;
 80001be:	4b1d      	ldr	r3, [pc, #116]	; (8000234 <save_status_check+0x90>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a1d      	ldr	r2, [pc, #116]	; (8000238 <save_status_check+0x94>)
 80001c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80001c8:	4b19      	ldr	r3, [pc, #100]	; (8000230 <save_status_check+0x8c>)
 80001ca:	681a      	ldr	r2, [r3, #0]
 80001cc:	4613      	mov	r3, r2
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	441a      	add	r2, r3
 80001d2:	4b18      	ldr	r3, [pc, #96]	; (8000234 <save_status_check+0x90>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4413      	add	r3, r2
 80001d8:	4a18      	ldr	r2, [pc, #96]	; (800023c <save_status_check+0x98>)
 80001da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001de:	4299      	cmp	r1, r3
 80001e0:	d114      	bne.n	800020c <save_status_check+0x68>
			else
			{
				if(j == 8)
 80001e2:	4b14      	ldr	r3, [pc, #80]	; (8000234 <save_status_check+0x90>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b08      	cmp	r3, #8
 80001e8:	d106      	bne.n	80001f8 <save_status_check+0x54>
				{
					save_status = 1;
 80001ea:	4b10      	ldr	r3, [pc, #64]	; (800022c <save_status_check+0x88>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	601a      	str	r2, [r3, #0]
					location_overlap = i;
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <save_status_check+0x8c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a12      	ldr	r2, [pc, #72]	; (8000240 <save_status_check+0x9c>)
 80001f6:	6013      	str	r3, [r2, #0]
		for(j=0; j<9; j++)
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <save_status_check+0x90>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	3301      	adds	r3, #1
 80001fe:	4a0d      	ldr	r2, [pc, #52]	; (8000234 <save_status_check+0x90>)
 8000200:	6013      	str	r3, [r2, #0]
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <save_status_check+0x90>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b08      	cmp	r3, #8
 8000208:	ddd9      	ble.n	80001be <save_status_check+0x1a>
 800020a:	e000      	b.n	800020e <save_status_check+0x6a>
			if(COM_BUFF[j] != COM_SAVE[i*9 + j]) break;
 800020c:	bf00      	nop
	for(i=0; i<5; i++)
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <save_status_check+0x8c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	3301      	adds	r3, #1
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <save_status_check+0x8c>)
 8000216:	6013      	str	r3, [r2, #0]
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <save_status_check+0x8c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b04      	cmp	r3, #4
 800021e:	ddca      	ble.n	80001b6 <save_status_check+0x12>
				}
			}
		}
	}
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	200001c8 	.word	0x200001c8
 8000230:	20000078 	.word	0x20000078
 8000234:	2000007c 	.word	0x2000007c
 8000238:	20000050 	.word	0x20000050
 800023c:	200000f8 	.word	0x200000f8
 8000240:	200001cc 	.word	0x200001cc

08000244 <car_in>:

//----------------------------Khi xe vào
void car_in()
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	for(i=4; i>=0;i--)
 8000248:	4b30      	ldr	r3, [pc, #192]	; (800030c <car_in+0xc8>)
 800024a:	2204      	movs	r2, #4
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	e00f      	b.n	8000270 <car_in+0x2c>
	{
		if(empty_array[i] == 0)
 8000250:	4b2e      	ldr	r3, [pc, #184]	; (800030c <car_in+0xc8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a2e      	ldr	r2, [pc, #184]	; (8000310 <car_in+0xcc>)
 8000256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d103      	bne.n	8000266 <car_in+0x22>
		{
			empty = i;
 800025e:	4b2b      	ldr	r3, [pc, #172]	; (800030c <car_in+0xc8>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a2c      	ldr	r2, [pc, #176]	; (8000314 <car_in+0xd0>)
 8000264:	6013      	str	r3, [r2, #0]
	for(i=4; i>=0;i--)
 8000266:	4b29      	ldr	r3, [pc, #164]	; (800030c <car_in+0xc8>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a27      	ldr	r2, [pc, #156]	; (800030c <car_in+0xc8>)
 800026e:	6013      	str	r3, [r2, #0]
 8000270:	4b26      	ldr	r3, [pc, #152]	; (800030c <car_in+0xc8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	daeb      	bge.n	8000250 <car_in+0xc>
		}
	}
	empty_array[empty] = 1;
 8000278:	4b26      	ldr	r3, [pc, #152]	; (8000314 <car_in+0xd0>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a24      	ldr	r2, [pc, #144]	; (8000310 <car_in+0xcc>)
 800027e:	2101      	movs	r1, #1
 8000280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	for(i=0; i<=5; i++)
 8000284:	4b21      	ldr	r3, [pc, #132]	; (800030c <car_in+0xc8>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	e016      	b.n	80002ba <car_in+0x76>
	{
		RFID_SAVE[empty*6 + i] = RFID_BUFF[i];
 800028c:	4b1f      	ldr	r3, [pc, #124]	; (800030c <car_in+0xc8>)
 800028e:	6819      	ldr	r1, [r3, #0]
 8000290:	4b20      	ldr	r3, [pc, #128]	; (8000314 <car_in+0xd0>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4613      	mov	r3, r2
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	4413      	add	r3, r2
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	461a      	mov	r2, r3
 800029e:	4b1b      	ldr	r3, [pc, #108]	; (800030c <car_in+0xc8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4413      	add	r3, r2
 80002a4:	4a1c      	ldr	r2, [pc, #112]	; (8000318 <car_in+0xd4>)
 80002a6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80002aa:	491c      	ldr	r1, [pc, #112]	; (800031c <car_in+0xd8>)
 80002ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0; i<=5; i++)
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <car_in+0xc8>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	3301      	adds	r3, #1
 80002b6:	4a15      	ldr	r2, [pc, #84]	; (800030c <car_in+0xc8>)
 80002b8:	6013      	str	r3, [r2, #0]
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <car_in+0xc8>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b05      	cmp	r3, #5
 80002c0:	dde4      	ble.n	800028c <car_in+0x48>
	}
	for(i=0; i<=8; i++)
 80002c2:	4b12      	ldr	r3, [pc, #72]	; (800030c <car_in+0xc8>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	e014      	b.n	80002f4 <car_in+0xb0>
	{
		COM_SAVE[empty*9 + i] = COM_BUFF[i];
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <car_in+0xc8>)
 80002cc:	6819      	ldr	r1, [r3, #0]
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <car_in+0xd0>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4613      	mov	r3, r2
 80002d4:	00db      	lsls	r3, r3, #3
 80002d6:	441a      	add	r2, r3
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <car_in+0xc8>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4413      	add	r3, r2
 80002de:	4a10      	ldr	r2, [pc, #64]	; (8000320 <car_in+0xdc>)
 80002e0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80002e4:	490f      	ldr	r1, [pc, #60]	; (8000324 <car_in+0xe0>)
 80002e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0; i<=8; i++)
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <car_in+0xc8>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	3301      	adds	r3, #1
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <car_in+0xc8>)
 80002f2:	6013      	str	r3, [r2, #0]
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <car_in+0xc8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b08      	cmp	r3, #8
 80002fa:	dde6      	ble.n	80002ca <car_in+0x86>
	}
	barie = 1;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <car_in+0xe4>)
 80002fe:	2201      	movs	r2, #1
 8000300:	601a      	str	r2, [r3, #0]
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000078 	.word	0x20000078
 8000310:	200001ac 	.word	0x200001ac
 8000314:	200001c4 	.word	0x200001c4
 8000318:	20000034 	.word	0x20000034
 800031c:	20000080 	.word	0x20000080
 8000320:	20000050 	.word	0x20000050
 8000324:	200000f8 	.word	0x200000f8
 8000328:	200001c0 	.word	0x200001c0

0800032c <car_out>:

//---------------------------Khi xe ra

void car_out()
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	overlap_status = 0;
 8000330:	4b36      	ldr	r3, [pc, #216]	; (800040c <car_out+0xe0>)
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
	for(i=0; i<6; i++)
 8000336:	4b36      	ldr	r3, [pc, #216]	; (8000410 <car_out+0xe4>)
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	e05c      	b.n	80003f8 <car_out+0xcc>
	{
		if(RFID_SAVE[location_overlap*6 + i] == RFID_BUFF[i])
 800033e:	4b35      	ldr	r3, [pc, #212]	; (8000414 <car_out+0xe8>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4613      	mov	r3, r2
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	4413      	add	r3, r2
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	461a      	mov	r2, r3
 800034c:	4b30      	ldr	r3, [pc, #192]	; (8000410 <car_out+0xe4>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4413      	add	r3, r2
 8000352:	4a31      	ldr	r2, [pc, #196]	; (8000418 <car_out+0xec>)
 8000354:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <car_out+0xe4>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	492f      	ldr	r1, [pc, #188]	; (800041c <car_out+0xf0>)
 800035e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000362:	429a      	cmp	r2, r3
 8000364:	d14d      	bne.n	8000402 <car_out+0xd6>
		{
			if(i == 5)
 8000366:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <car_out+0xe4>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b05      	cmp	r3, #5
 800036c:	d13f      	bne.n	80003ee <car_out+0xc2>
			{
				overlap_status = 1;
 800036e:	4b27      	ldr	r3, [pc, #156]	; (800040c <car_out+0xe0>)
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
				barie = 1;
 8000374:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <car_out+0xf4>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
				for(i=0; i<6; i++)
 800037a:	4b25      	ldr	r3, [pc, #148]	; (8000410 <car_out+0xe4>)
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	e012      	b.n	80003a8 <car_out+0x7c>
				{
					RFID_SAVE[location_overlap*6 + i] = 0;
 8000382:	4b24      	ldr	r3, [pc, #144]	; (8000414 <car_out+0xe8>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4613      	mov	r3, r2
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	4413      	add	r3, r2
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	461a      	mov	r2, r3
 8000390:	4b1f      	ldr	r3, [pc, #124]	; (8000410 <car_out+0xe4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4413      	add	r3, r2
 8000396:	4a20      	ldr	r2, [pc, #128]	; (8000418 <car_out+0xec>)
 8000398:	2100      	movs	r1, #0
 800039a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(i=0; i<6; i++)
 800039e:	4b1c      	ldr	r3, [pc, #112]	; (8000410 <car_out+0xe4>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3301      	adds	r3, #1
 80003a4:	4a1a      	ldr	r2, [pc, #104]	; (8000410 <car_out+0xe4>)
 80003a6:	6013      	str	r3, [r2, #0]
 80003a8:	4b19      	ldr	r3, [pc, #100]	; (8000410 <car_out+0xe4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b05      	cmp	r3, #5
 80003ae:	dde8      	ble.n	8000382 <car_out+0x56>
				}
				for(i=0; i<9; i++)
 80003b0:	4b17      	ldr	r3, [pc, #92]	; (8000410 <car_out+0xe4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	e010      	b.n	80003da <car_out+0xae>
				{
					COM_SAVE[location_overlap*9 + i] = 0;
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <car_out+0xe8>)
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	4613      	mov	r3, r2
 80003be:	00db      	lsls	r3, r3, #3
 80003c0:	441a      	add	r2, r3
 80003c2:	4b13      	ldr	r3, [pc, #76]	; (8000410 <car_out+0xe4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4413      	add	r3, r2
 80003c8:	4a16      	ldr	r2, [pc, #88]	; (8000424 <car_out+0xf8>)
 80003ca:	2100      	movs	r1, #0
 80003cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(i=0; i<9; i++)
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <car_out+0xe4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	3301      	adds	r3, #1
 80003d6:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <car_out+0xe4>)
 80003d8:	6013      	str	r3, [r2, #0]
 80003da:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <car_out+0xe4>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b08      	cmp	r3, #8
 80003e0:	ddea      	ble.n	80003b8 <car_out+0x8c>
				}
				empty_array[location_overlap] = 0;
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <car_out+0xe8>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a10      	ldr	r2, [pc, #64]	; (8000428 <car_out+0xfc>)
 80003e8:	2100      	movs	r1, #0
 80003ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i=0; i<6; i++)
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <car_out+0xe4>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	3301      	adds	r3, #1
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <car_out+0xe4>)
 80003f6:	6013      	str	r3, [r2, #0]
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <car_out+0xe4>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b05      	cmp	r3, #5
 80003fe:	dd9e      	ble.n	800033e <car_out+0x12>
			}
		}
		else break;
	}
}
 8000400:	e000      	b.n	8000404 <car_out+0xd8>
		else break;
 8000402:	bf00      	nop
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	200001d0 	.word	0x200001d0
 8000410:	20000078 	.word	0x20000078
 8000414:	200001cc 	.word	0x200001cc
 8000418:	20000080 	.word	0x20000080
 800041c:	20000034 	.word	0x20000034
 8000420:	200001c0 	.word	0x200001c0
 8000424:	200000f8 	.word	0x200000f8
 8000428:	200001ac 	.word	0x200001ac

0800042c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	  {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
		  if(huart -> Instance == USART3)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a2a      	ldr	r2, [pc, #168]	; (80004e4 <HAL_UART_RxCpltCallback+0xb8>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d122      	bne.n	8000484 <HAL_UART_RxCpltCallback+0x58>
		  {
			  if(RFID_COUNT<6)
 800043e:	4b2a      	ldr	r3, [pc, #168]	; (80004e8 <HAL_UART_RxCpltCallback+0xbc>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b05      	cmp	r3, #5
 8000444:	dc0b      	bgt.n	800045e <HAL_UART_RxCpltCallback+0x32>
			  {
				  RFID_BUFF[RFID_COUNT] = RFID_DATA;
 8000446:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <HAL_UART_RxCpltCallback+0xbc>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a28      	ldr	r2, [pc, #160]	; (80004ec <HAL_UART_RxCpltCallback+0xc0>)
 800044c:	6812      	ldr	r2, [r2, #0]
 800044e:	4928      	ldr	r1, [pc, #160]	; (80004f0 <HAL_UART_RxCpltCallback+0xc4>)
 8000450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  RFID_COUNT++;
 8000454:	4b24      	ldr	r3, [pc, #144]	; (80004e8 <HAL_UART_RxCpltCallback+0xbc>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	3301      	adds	r3, #1
 800045a:	4a23      	ldr	r2, [pc, #140]	; (80004e8 <HAL_UART_RxCpltCallback+0xbc>)
 800045c:	6013      	str	r3, [r2, #0]
			  }
			  if(RFID_COUNT==6)
 800045e:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <HAL_UART_RxCpltCallback+0xbc>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b06      	cmp	r3, #6
 8000464:	d109      	bne.n	800047a <HAL_UART_RxCpltCallback+0x4e>
			  {
				  RFID_COUNT=0;
 8000466:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <HAL_UART_RxCpltCallback+0xbc>)
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, senddata, 1, 100);
 800046c:	4b21      	ldr	r3, [pc, #132]	; (80004f4 <HAL_UART_RxCpltCallback+0xc8>)
 800046e:	6819      	ldr	r1, [r3, #0]
 8000470:	2364      	movs	r3, #100	; 0x64
 8000472:	2201      	movs	r2, #1
 8000474:	4820      	ldr	r0, [pc, #128]	; (80004f8 <HAL_UART_RxCpltCallback+0xcc>)
 8000476:	f002 fcd3 	bl	8002e20 <HAL_UART_Transmit>
//				  buzzer(1);
			  }
			  HAL_UART_Receive_IT(&huart3, &RFID_DATA, 1);
 800047a:	2201      	movs	r2, #1
 800047c:	491b      	ldr	r1, [pc, #108]	; (80004ec <HAL_UART_RxCpltCallback+0xc0>)
 800047e:	481f      	ldr	r0, [pc, #124]	; (80004fc <HAL_UART_RxCpltCallback+0xd0>)
 8000480:	f002 fd51 	bl	8002f26 <HAL_UART_Receive_IT>
		  }

		  if(huart -> Instance == USART2)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a1d      	ldr	r2, [pc, #116]	; (8000500 <HAL_UART_RxCpltCallback+0xd4>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d126      	bne.n	80004dc <HAL_UART_RxCpltCallback+0xb0>
		  {
			  if(COM_COUNT<9)
 800048e:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <HAL_UART_RxCpltCallback+0xd8>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b08      	cmp	r3, #8
 8000494:	dc0b      	bgt.n	80004ae <HAL_UART_RxCpltCallback+0x82>
			  {
				  COM_BUFF[COM_COUNT] = COM_DATA;
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <HAL_UART_RxCpltCallback+0xd8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a1b      	ldr	r2, [pc, #108]	; (8000508 <HAL_UART_RxCpltCallback+0xdc>)
 800049c:	6812      	ldr	r2, [r2, #0]
 800049e:	491b      	ldr	r1, [pc, #108]	; (800050c <HAL_UART_RxCpltCallback+0xe0>)
 80004a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  COM_COUNT++;
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <HAL_UART_RxCpltCallback+0xd8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3301      	adds	r3, #1
 80004aa:	4a16      	ldr	r2, [pc, #88]	; (8000504 <HAL_UART_RxCpltCallback+0xd8>)
 80004ac:	6013      	str	r3, [r2, #0]
			  }
			  if(COM_COUNT==9)
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <HAL_UART_RxCpltCallback+0xd8>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b09      	cmp	r3, #9
 80004b4:	d10d      	bne.n	80004d2 <HAL_UART_RxCpltCallback+0xa6>
			  {
				  COM_COUNT=0;
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <HAL_UART_RxCpltCallback+0xd8>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
				  save_status_check();
 80004bc:	f7ff fe72 	bl	80001a4 <save_status_check>
				  if(save_status == 0)
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <HAL_UART_RxCpltCallback+0xe4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d102      	bne.n	80004ce <HAL_UART_RxCpltCallback+0xa2>
				  {
					  car_in();
 80004c8:	f7ff febc 	bl	8000244 <car_in>
 80004cc:	e001      	b.n	80004d2 <HAL_UART_RxCpltCallback+0xa6>
				  }
				  else
				  {
					  car_out();
 80004ce:	f7ff ff2d 	bl	800032c <car_out>
				  }
			  }
			  HAL_UART_Receive_IT(&huart2, &COM_DATA, 1);
 80004d2:	2201      	movs	r2, #1
 80004d4:	490c      	ldr	r1, [pc, #48]	; (8000508 <HAL_UART_RxCpltCallback+0xdc>)
 80004d6:	4808      	ldr	r0, [pc, #32]	; (80004f8 <HAL_UART_RxCpltCallback+0xcc>)
 80004d8:	f002 fd25 	bl	8002f26 <HAL_UART_Receive_IT>
		  }
	  }
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40004800 	.word	0x40004800
 80004e8:	2000002c 	.word	0x2000002c
 80004ec:	2000004c 	.word	0x2000004c
 80004f0:	20000034 	.word	0x20000034
 80004f4:	20000000 	.word	0x20000000
 80004f8:	20000238 	.word	0x20000238
 80004fc:	20000280 	.word	0x20000280
 8000500:	40004400 	.word	0x40004400
 8000504:	20000030 	.word	0x20000030
 8000508:	20000074 	.word	0x20000074
 800050c:	20000050 	.word	0x20000050
 8000510:	200001c8 	.word	0x200001c8

08000514 <SensorRead>:
int Sensor_buff[5];

int x;

void SensorRead()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	EMPTY_NUMBER =5;
 8000518:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <SensorRead+0x94>)
 800051a:	2205      	movs	r2, #5
 800051c:	601a      	str	r2, [r3, #0]
	Sensor_buff[0] = HAL_GPIO_ReadPin(SS1_PIN_GPIO_Port, SS1_PIN_Pin);
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	4822      	ldr	r0, [pc, #136]	; (80005ac <SensorRead+0x98>)
 8000522:	f001 f943 	bl	80017ac <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	461a      	mov	r2, r3
 800052a:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <SensorRead+0x9c>)
 800052c:	601a      	str	r2, [r3, #0]
	Sensor_buff[1] = HAL_GPIO_ReadPin(SS2_PIN_GPIO_Port, SS2_PIN_Pin);
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	481e      	ldr	r0, [pc, #120]	; (80005ac <SensorRead+0x98>)
 8000532:	f001 f93b 	bl	80017ac <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <SensorRead+0x9c>)
 800053c:	605a      	str	r2, [r3, #4]
	Sensor_buff[2] = HAL_GPIO_ReadPin(SS3_PIN_GPIO_Port, SS3_PIN_Pin);
 800053e:	2120      	movs	r1, #32
 8000540:	481a      	ldr	r0, [pc, #104]	; (80005ac <SensorRead+0x98>)
 8000542:	f001 f933 	bl	80017ac <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <SensorRead+0x9c>)
 800054c:	609a      	str	r2, [r3, #8]
	Sensor_buff[3] = HAL_GPIO_ReadPin(SS4_PIN_GPIO_Port, SS4_PIN_Pin);
 800054e:	2110      	movs	r1, #16
 8000550:	4816      	ldr	r0, [pc, #88]	; (80005ac <SensorRead+0x98>)
 8000552:	f001 f92b 	bl	80017ac <HAL_GPIO_ReadPin>
 8000556:	4603      	mov	r3, r0
 8000558:	461a      	mov	r2, r3
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <SensorRead+0x9c>)
 800055c:	60da      	str	r2, [r3, #12]
	Sensor_buff[4] = HAL_GPIO_ReadPin(SS5_PIN_GPIO_Port, SS5_PIN_Pin);
 800055e:	2108      	movs	r1, #8
 8000560:	4812      	ldr	r0, [pc, #72]	; (80005ac <SensorRead+0x98>)
 8000562:	f001 f923 	bl	80017ac <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <SensorRead+0x9c>)
 800056c:	611a      	str	r2, [r3, #16]

	for(x=0; x<5; x++)
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <SensorRead+0xa0>)
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	e010      	b.n	8000598 <SensorRead+0x84>
	{
		if(Sensor_buff[x] == 0)
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <SensorRead+0xa0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <SensorRead+0x9c>)
 800057c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d104      	bne.n	800058e <SensorRead+0x7a>
		{
			EMPTY_NUMBER --;
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <SensorRead+0x94>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3b01      	subs	r3, #1
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <SensorRead+0x94>)
 800058c:	6013      	str	r3, [r2, #0]
	for(x=0; x<5; x++)
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <SensorRead+0xa0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3301      	adds	r3, #1
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <SensorRead+0xa0>)
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <SensorRead+0xa0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b04      	cmp	r3, #4
 800059e:	ddea      	ble.n	8000576 <SensorRead+0x62>
		}
	}
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200001d4 	.word	0x200001d4
 80005ac:	40010c00 	.word	0x40010c00
 80005b0:	200001d8 	.word	0x200001d8
 80005b4:	200001ec 	.word	0x200001ec

080005b8 <LCD_Enable>:
		for(j=0;j<2;j++);
	}
} 

void LCD_Enable(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin,GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <LCD_Enable+0x2c>)
 80005c4:	f001 f909 	bl	80017da <HAL_GPIO_WritePin>
    HAL_Delay(1);	 	
 80005c8:	2001      	movs	r0, #1
 80005ca:	f000 fd87 	bl	80010dc <HAL_Delay>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin,GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <LCD_Enable+0x2c>)
 80005d6:	f001 f900 	bl	80017da <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fd7e 	bl	80010dc <HAL_Delay>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <LCD_Send4Bit>:

void LCD_Send4Bit(unsigned char Data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, Data & 0x01);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <LCD_Send4Bit+0x70>)
 8000602:	f001 f8ea 	bl	80017da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (Data>>1)&1);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	085b      	lsrs	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000618:	480f      	ldr	r0, [pc, #60]	; (8000658 <LCD_Send4Bit+0x70>)
 800061a:	f001 f8de 	bl	80017da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (Data>>2)&1);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	461a      	mov	r2, r3
 800062c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000630:	480a      	ldr	r0, [pc, #40]	; (800065c <LCD_Send4Bit+0x74>)
 8000632:	f001 f8d2 	bl	80017da <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (Data>>3)&1);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	08db      	lsrs	r3, r3, #3
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	461a      	mov	r2, r3
 8000644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <LCD_Send4Bit+0x74>)
 800064a:	f001 f8c6 	bl	80017da <HAL_GPIO_WritePin>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40010c00 	.word	0x40010c00
 800065c:	40010800 	.word	0x40010800

08000660 <LCD_SendCommand>:

void LCD_SendCommand(unsigned char command)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  LCD_Send4Bit(command >> 4);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffb9 	bl	80005e8 <LCD_Send4Bit>
  LCD_Enable();
 8000676:	f7ff ff9f 	bl	80005b8 <LCD_Enable>
  LCD_Send4Bit(command);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ffb3 	bl	80005e8 <LCD_Send4Bit>
  LCD_Enable();
 8000682:	f7ff ff99 	bl	80005b8 <LCD_Enable>

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <LCD_Init>:



void LCD_Init()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  LCD_Send4Bit(0x00);
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff ffa7 	bl	80005e8 <LCD_Send4Bit>
	HAL_Delay(200);
 800069a:	20c8      	movs	r0, #200	; 0xc8
 800069c:	f000 fd1e 	bl	80010dc <HAL_Delay>
	
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a6:	480f      	ldr	r0, [pc, #60]	; (80006e4 <LCD_Init+0x54>)
 80006a8:	f001 f897 	bl	80017da <HAL_GPIO_WritePin>
	
  LCD_Send4Bit(0x03);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f7ff ff9b 	bl	80005e8 <LCD_Send4Bit>
  LCD_Enable();
 80006b2:	f7ff ff81 	bl	80005b8 <LCD_Enable>
  LCD_Enable();
 80006b6:	f7ff ff7f 	bl	80005b8 <LCD_Enable>
  LCD_Enable();
 80006ba:	f7ff ff7d 	bl	80005b8 <LCD_Enable>
  LCD_Send4Bit(0x02);
 80006be:	2002      	movs	r0, #2
 80006c0:	f7ff ff92 	bl	80005e8 <LCD_Send4Bit>
  LCD_Enable();
 80006c4:	f7ff ff78 	bl	80005b8 <LCD_Enable>
  LCD_SendCommand(0x28); // giao thuc 4 bit, hien thi 2 hang, ki tu 5x8
 80006c8:	2028      	movs	r0, #40	; 0x28
 80006ca:	f7ff ffc9 	bl	8000660 <LCD_SendCommand>
  LCD_SendCommand(0x0C); // cho phep hien thi man hinh9
 80006ce:	200c      	movs	r0, #12
 80006d0:	f7ff ffc6 	bl	8000660 <LCD_SendCommand>
  LCD_SendCommand(0x06); // tang ID, khong dich khung hinh
 80006d4:	2006      	movs	r0, #6
 80006d6:	f7ff ffc3 	bl	8000660 <LCD_SendCommand>
  LCD_SendCommand(0x01); // xoa toan bo khung hinh
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff ffc0 	bl	8000660 <LCD_SendCommand>
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40010c00 	.word	0x40010c00

080006e8 <LCD_Gotoxy>:

void LCD_Gotoxy(unsigned char x, unsigned char y)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
  unsigned char address;
  if(y == 0)address=(0x80 + x);
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d103      	bne.n	8000706 <LCD_Gotoxy+0x1e>
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	3b80      	subs	r3, #128	; 0x80
 8000702:	73fb      	strb	r3, [r7, #15]
 8000704:	e005      	b.n	8000712 <LCD_Gotoxy+0x2a>
  else if(y == 1) address=(0xc0 + x);
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d102      	bne.n	8000712 <LCD_Gotoxy+0x2a>
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	3b40      	subs	r3, #64	; 0x40
 8000710:	73fb      	strb	r3, [r7, #15]
  LCD_SendCommand(address);
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ffa3 	bl	8000660 <LCD_SendCommand>
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <LCD_Clear>:

void LCD_Clear()
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
  LCD_SendCommand(0x01);
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff ff9a 	bl	8000660 <LCD_SendCommand>
  HAL_Delay(2);
 800072c:	2002      	movs	r0, #2
 800072e:	f000 fcd5 	bl	80010dc <HAL_Delay>
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <LCD_PutChar>:

void LCD_PutChar(unsigned char Data)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin,GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000748:	4808      	ldr	r0, [pc, #32]	; (800076c <LCD_PutChar+0x34>)
 800074a:	f001 f846 	bl	80017da <HAL_GPIO_WritePin>
  LCD_SendCommand(Data);
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff85 	bl	8000660 <LCD_SendCommand>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin,GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <LCD_PutChar+0x34>)
 800075e:	f001 f83c 	bl	80017da <HAL_GPIO_WritePin>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40010c00 	.word	0x40010c00

08000770 <LCD_Puts>:

void LCD_Puts(char *s)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  while (*s)
 8000778:	e007      	b.n	800078a <LCD_Puts+0x1a>
  {
    LCD_PutChar(*s);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ffda 	bl	8000738 <LCD_PutChar>
    s++;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3301      	adds	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
  while (*s)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f3      	bne.n	800077a <LCD_Puts+0xa>
  }
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <hien_thi>:

void hien_thi(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	// Xe vào hoặc xe ra mã thẻ đúng
	if(barie == 1)
 80007a0:	4b60      	ldr	r3, [pc, #384]	; (8000924 <hien_thi+0x188>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d128      	bne.n	80007fa <hien_thi+0x5e>
	{
		buzzer(2);
 80007a8:	2002      	movs	r0, #2
 80007aa:	f7ff fccf 	bl	800014c <buzzer>
		if(save_status == 1)
 80007ae:	4b5e      	ldr	r3, [pc, #376]	; (8000928 <hien_thi+0x18c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d104      	bne.n	80007c0 <hien_thi+0x24>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 10);
 80007b6:	4b5d      	ldr	r3, [pc, #372]	; (800092c <hien_thi+0x190>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	220a      	movs	r2, #10
 80007bc:	639a      	str	r2, [r3, #56]	; 0x38
 80007be:	e003      	b.n	80007c8 <hien_thi+0x2c>
		}

		else
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 10);
 80007c0:	4b5a      	ldr	r3, [pc, #360]	; (800092c <hien_thi+0x190>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	220a      	movs	r2, #10
 80007c6:	635a      	str	r2, [r3, #52]	; 0x34
		}
		LCD_Clear();
 80007c8:	f7ff ffab 	bl	8000722 <LCD_Clear>
		LCD_Gotoxy(3, 0);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2003      	movs	r0, #3
 80007d0:	f7ff ff8a 	bl	80006e8 <LCD_Gotoxy>
		LCD_Puts("BARIE OPEN");
 80007d4:	4856      	ldr	r0, [pc, #344]	; (8000930 <hien_thi+0x194>)
 80007d6:	f7ff ffcb 	bl	8000770 <LCD_Puts>

		HAL_Delay(6000);
 80007da:	f241 7070 	movw	r0, #6000	; 0x1770
 80007de:	f000 fc7d 	bl	80010dc <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 20);
 80007e2:	4b52      	ldr	r3, [pc, #328]	; (800092c <hien_thi+0x190>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2214      	movs	r2, #20
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 20);
 80007ea:	4b50      	ldr	r3, [pc, #320]	; (800092c <hien_thi+0x190>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2214      	movs	r2, #20
 80007f0:	639a      	str	r2, [r3, #56]	; 0x38
		barie = 0;
 80007f2:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <hien_thi+0x188>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	e00e      	b.n	8000818 <hien_thi+0x7c>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 20);
 80007fa:	4b4c      	ldr	r3, [pc, #304]	; (800092c <hien_thi+0x190>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2214      	movs	r2, #20
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 20);
 8000802:	4b4a      	ldr	r3, [pc, #296]	; (800092c <hien_thi+0x190>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2214      	movs	r2, #20
 8000808:	639a      	str	r2, [r3, #56]	; 0x38
		LCD_Gotoxy(3, 0);
 800080a:	2100      	movs	r1, #0
 800080c:	2003      	movs	r0, #3
 800080e:	f7ff ff6b 	bl	80006e8 <LCD_Gotoxy>
		LCD_Puts("BARIE CLOSE");
 8000812:	4848      	ldr	r0, [pc, #288]	; (8000934 <hien_thi+0x198>)
 8000814:	f7ff ffac 	bl	8000770 <LCD_Puts>
	}

	// Xe ra nhưng mã thẻ sai
	if(save_status == 1 && overlap_status == 0)
 8000818:	4b43      	ldr	r3, [pc, #268]	; (8000928 <hien_thi+0x18c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d11f      	bne.n	8000860 <hien_thi+0xc4>
 8000820:	4b45      	ldr	r3, [pc, #276]	; (8000938 <hien_thi+0x19c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d11b      	bne.n	8000860 <hien_thi+0xc4>
	{
		LCD_Clear();
 8000828:	f7ff ff7b 	bl	8000722 <LCD_Clear>
		LCD_Gotoxy(6, 0);
 800082c:	2100      	movs	r1, #0
 800082e:	2006      	movs	r0, #6
 8000830:	f7ff ff5a 	bl	80006e8 <LCD_Gotoxy>
		LCD_Puts("ERROR");
 8000834:	4841      	ldr	r0, [pc, #260]	; (800093c <hien_thi+0x1a0>)
 8000836:	f7ff ff9b 	bl	8000770 <LCD_Puts>
		buzzer(6);
 800083a:	2006      	movs	r0, #6
 800083c:	f7ff fc86 	bl	800014c <buzzer>
		HAL_Delay(5000);
 8000840:	f241 3088 	movw	r0, #5000	; 0x1388
 8000844:	f000 fc4a 	bl	80010dc <HAL_Delay>
		LCD_Clear();
 8000848:	f7ff ff6b 	bl	8000722 <LCD_Clear>
		LCD_Gotoxy(3, 0);
 800084c:	2100      	movs	r1, #0
 800084e:	2003      	movs	r0, #3
 8000850:	f7ff ff4a 	bl	80006e8 <LCD_Gotoxy>
		LCD_Puts("BARIE CLOSE");
 8000854:	4837      	ldr	r0, [pc, #220]	; (8000934 <hien_thi+0x198>)
 8000856:	f7ff ff8b 	bl	8000770 <LCD_Puts>
		save_status = 0;
 800085a:	4b33      	ldr	r3, [pc, #204]	; (8000928 <hien_thi+0x18c>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
	}

	// Hiển thị số vị trí trống
	LCD_Gotoxy(0, 1);
 8000860:	2101      	movs	r1, #1
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff ff40 	bl	80006e8 <LCD_Gotoxy>
	LCD_Puts("EMPTY: ");
 8000868:	4835      	ldr	r0, [pc, #212]	; (8000940 <hien_thi+0x1a4>)
 800086a:	f7ff ff81 	bl	8000770 <LCD_Puts>
	LCD_Gotoxy(7, 1);
 800086e:	2101      	movs	r1, #1
 8000870:	2007      	movs	r0, #7
 8000872:	f7ff ff39 	bl	80006e8 <LCD_Gotoxy>
	LCD_PutChar(EMPTY_NUMBER + 48);
 8000876:	4b33      	ldr	r3, [pc, #204]	; (8000944 <hien_thi+0x1a8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	3330      	adds	r3, #48	; 0x30
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff59 	bl	8000738 <LCD_PutChar>
	LCD_Gotoxy(9, 1);
 8000886:	2101      	movs	r1, #1
 8000888:	2009      	movs	r0, #9
 800088a:	f7ff ff2d 	bl	80006e8 <LCD_Gotoxy>
	LCD_Puts("- ");
 800088e:	482e      	ldr	r0, [pc, #184]	; (8000948 <hien_thi+0x1ac>)
 8000890:	f7ff ff6e 	bl	8000770 <LCD_Puts>

	// Hiển thị cụ thể vị trí trống
	LCD_Gotoxy(11, 1);
 8000894:	2101      	movs	r1, #1
 8000896:	200b      	movs	r0, #11
 8000898:	f7ff ff26 	bl	80006e8 <LCD_Gotoxy>
	LCD_PutChar(!Sensor_buff[4] + 48);
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <hien_thi+0x1b0>)
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <hien_thi+0x10c>
 80008a4:	2331      	movs	r3, #49	; 0x31
 80008a6:	e000      	b.n	80008aa <hien_thi+0x10e>
 80008a8:	2330      	movs	r3, #48	; 0x30
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff44 	bl	8000738 <LCD_PutChar>
	LCD_Gotoxy(12, 1);
 80008b0:	2101      	movs	r1, #1
 80008b2:	200c      	movs	r0, #12
 80008b4:	f7ff ff18 	bl	80006e8 <LCD_Gotoxy>
	LCD_PutChar(!Sensor_buff[3] + 48);
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <hien_thi+0x1b0>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d101      	bne.n	80008c4 <hien_thi+0x128>
 80008c0:	2331      	movs	r3, #49	; 0x31
 80008c2:	e000      	b.n	80008c6 <hien_thi+0x12a>
 80008c4:	2330      	movs	r3, #48	; 0x30
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff36 	bl	8000738 <LCD_PutChar>
	LCD_Gotoxy(13, 1);
 80008cc:	2101      	movs	r1, #1
 80008ce:	200d      	movs	r0, #13
 80008d0:	f7ff ff0a 	bl	80006e8 <LCD_Gotoxy>
	LCD_PutChar(!Sensor_buff[2] + 48);
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <hien_thi+0x1b0>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d101      	bne.n	80008e0 <hien_thi+0x144>
 80008dc:	2331      	movs	r3, #49	; 0x31
 80008de:	e000      	b.n	80008e2 <hien_thi+0x146>
 80008e0:	2330      	movs	r3, #48	; 0x30
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff28 	bl	8000738 <LCD_PutChar>
	LCD_Gotoxy(14, 1);
 80008e8:	2101      	movs	r1, #1
 80008ea:	200e      	movs	r0, #14
 80008ec:	f7ff fefc 	bl	80006e8 <LCD_Gotoxy>
	LCD_PutChar(!Sensor_buff[1] + 48);
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <hien_thi+0x1b0>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d101      	bne.n	80008fc <hien_thi+0x160>
 80008f8:	2331      	movs	r3, #49	; 0x31
 80008fa:	e000      	b.n	80008fe <hien_thi+0x162>
 80008fc:	2330      	movs	r3, #48	; 0x30
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff1a 	bl	8000738 <LCD_PutChar>
	LCD_Gotoxy(15, 1);
 8000904:	2101      	movs	r1, #1
 8000906:	200f      	movs	r0, #15
 8000908:	f7ff feee 	bl	80006e8 <LCD_Gotoxy>
	LCD_PutChar(!Sensor_buff[0] + 48);
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <hien_thi+0x1b0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <hien_thi+0x17c>
 8000914:	2331      	movs	r3, #49	; 0x31
 8000916:	e000      	b.n	800091a <hien_thi+0x17e>
 8000918:	2330      	movs	r3, #48	; 0x30
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff0c 	bl	8000738 <LCD_PutChar>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200001c0 	.word	0x200001c0
 8000928:	200001c8 	.word	0x200001c8
 800092c:	200001f0 	.word	0x200001f0
 8000930:	08003ae4 	.word	0x08003ae4
 8000934:	08003af0 	.word	0x08003af0
 8000938:	200001d0 	.word	0x200001d0
 800093c:	08003afc 	.word	0x08003afc
 8000940:	08003b04 	.word	0x08003b04
 8000944:	200001d4 	.word	0x200001d4
 8000948:	08003b0c 	.word	0x08003b0c
 800094c:	200001d8 	.word	0x200001d8

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f000 fb60 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f82e 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f000 f954 	bl	8000c08 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000960:	f000 f866 	bl	8000a30 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000964:	f000 f8fc 	bl	8000b60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000968:	f000 f924 	bl	8000bb4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &RFID_DATA, 1);
 800096c:	2201      	movs	r2, #1
 800096e:	490d      	ldr	r1, [pc, #52]	; (80009a4 <main+0x54>)
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <main+0x58>)
 8000972:	f002 fad8 	bl	8002f26 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &COM_DATA, 1);
 8000976:	2201      	movs	r2, #1
 8000978:	490c      	ldr	r1, [pc, #48]	; (80009ac <main+0x5c>)
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <main+0x60>)
 800097c:	f002 fad3 	bl	8002f26 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000980:	2100      	movs	r1, #0
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <main+0x64>)
 8000984:	f001 fbfa 	bl	800217c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000988:	2104      	movs	r1, #4
 800098a:	480a      	ldr	r0, [pc, #40]	; (80009b4 <main+0x64>)
 800098c:	f001 fbf6 	bl	800217c <HAL_TIM_PWM_Start>

  LCD_Init();
 8000990:	f7ff fe7e 	bl	8000690 <LCD_Init>
  LCD_Clear();
 8000994:	f7ff fec5 	bl	8000722 <LCD_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SensorRead();
 8000998:	f7ff fdbc 	bl	8000514 <SensorRead>
	  hien_thi();
 800099c:	f7ff fefe 	bl	800079c <hien_thi>
	  SensorRead();
 80009a0:	e7fa      	b.n	8000998 <main+0x48>
 80009a2:	bf00      	nop
 80009a4:	2000004c 	.word	0x2000004c
 80009a8:	20000280 	.word	0x20000280
 80009ac:	20000074 	.word	0x20000074
 80009b0:	20000238 	.word	0x20000238
 80009b4:	200001f0 	.word	0x200001f0

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b090      	sub	sp, #64	; 0x40
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0318 	add.w	r3, r7, #24
 80009c2:	2228      	movs	r2, #40	; 0x28
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 f852 	bl	8003a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009de:	2301      	movs	r3, #1
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e2:	2310      	movs	r3, #16
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 0318 	add.w	r3, r7, #24
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 ff0c 	bl	800180c <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009fa:	f000 f98b 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 f97a 	bl	8001d10 <HAL_RCC_ClockConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a22:	f000 f977 	bl	8000d14 <Error_Handler>
  }
}
 8000a26:	bf00      	nop
 8000a28:	3740      	adds	r7, #64	; 0x40
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b092      	sub	sp, #72	; 0x48
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]
 8000a6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a70:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000a72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800;
 8000a78:	4b38      	ldr	r3, [pc, #224]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000a7a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000a7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000a86:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000a88:	22c8      	movs	r2, #200	; 0xc8
 8000a8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a92:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a98:	4830      	ldr	r0, [pc, #192]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000a9a:	f001 fac7 	bl	800202c <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000aa4:	f000 f936 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4829      	ldr	r0, [pc, #164]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000ab6:	f001 fcc5 	bl	8002444 <HAL_TIM_ConfigClockSource>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ac0:	f000 f928 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ac4:	4825      	ldr	r0, [pc, #148]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000ac6:	f001 fb00 	bl	80020ca <HAL_TIM_PWM_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000ad0:	f000 f920 	bl	8000d14 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481e      	ldr	r0, [pc, #120]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000ae4:	f001 fd75 	bl	80025d2 <HAL_TIM_SlaveConfigSynchro>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000aee:	f000 f911 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4816      	ldr	r0, [pc, #88]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000b02:	f002 f8df 	bl	8002cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000b0c:	f000 f902 	bl	8000d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b10:	2360      	movs	r3, #96	; 0x60
 8000b12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000b28:	f001 fbca 	bl	80022c0 <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000b32:	f000 f8ef 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4807      	ldr	r0, [pc, #28]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000b3e:	f001 fbbf 	bl	80022c0 <HAL_TIM_PWM_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000b48:	f000 f8e4 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <MX_TIM2_Init+0x12c>)
 8000b4e:	f000 f935 	bl	8000dbc <HAL_TIM_MspPostInit>

}
 8000b52:	bf00      	nop
 8000b54:	3748      	adds	r7, #72	; 0x48
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200001f0 	.word	0x200001f0

08000b60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <MX_USART2_UART_Init+0x50>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USART2_UART_Init+0x4c>)
 8000b98:	f002 f8f2 	bl	8002d80 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ba2:	f000 f8b7 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000238 	.word	0x20000238
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <MX_USART3_UART_Init+0x50>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bec:	f002 f8c8 	bl	8002d80 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bf6:	f000 f88d 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000280 	.word	0x20000280
 8000c04:	40004800 	.word	0x40004800

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1c:	4b39      	ldr	r3, [pc, #228]	; (8000d04 <MX_GPIO_Init+0xfc>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a38      	ldr	r2, [pc, #224]	; (8000d04 <MX_GPIO_Init+0xfc>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b36      	ldr	r3, [pc, #216]	; (8000d04 <MX_GPIO_Init+0xfc>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0310 	and.w	r3, r3, #16
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <MX_GPIO_Init+0xfc>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a32      	ldr	r2, [pc, #200]	; (8000d04 <MX_GPIO_Init+0xfc>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <MX_GPIO_Init+0xfc>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <MX_GPIO_Init+0xfc>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <MX_GPIO_Init+0xfc>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <MX_GPIO_Init+0xfc>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0308 	and.w	r3, r3, #8
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6a:	4827      	ldr	r0, [pc, #156]	; (8000d08 <MX_GPIO_Init+0x100>)
 8000c6c:	f000 fdb5 	bl	80017da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_pin_Pin|LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin
 8000c70:	2200      	movs	r2, #0
 8000c72:	f24f 0102 	movw	r1, #61442	; 0xf002
 8000c76:	4825      	ldr	r0, [pc, #148]	; (8000d0c <MX_GPIO_Init+0x104>)
 8000c78:	f000 fdaf 	bl	80017da <HAL_GPIO_WritePin>
                          |LCD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c82:	4823      	ldr	r0, [pc, #140]	; (8000d10 <MX_GPIO_Init+0x108>)
 8000c84:	f000 fda9 	bl	80017da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4819      	ldr	r0, [pc, #100]	; (8000d08 <MX_GPIO_Init+0x100>)
 8000ca2:	f000 fbff 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_pin_Pin LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin
                           LCD_D5_Pin */
  GPIO_InitStruct.Pin = Buzzer_pin_Pin|LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin
 8000ca6:	f24f 0302 	movw	r3, #61442	; 0xf002
 8000caa:	613b      	str	r3, [r7, #16]
                          |LCD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4813      	ldr	r0, [pc, #76]	; (8000d0c <MX_GPIO_Init+0x104>)
 8000cc0:	f000 fbf0 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D7_Pin;
 8000cc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <MX_GPIO_Init+0x108>)
 8000cde:	f000 fbe1 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS5_PIN_Pin SS4_PIN_Pin SS3_PIN_Pin SS2_PIN_Pin
                           SS1_PIN_Pin */
  GPIO_InitStruct.Pin = SS5_PIN_Pin|SS4_PIN_Pin|SS3_PIN_Pin|SS2_PIN_Pin
 8000ce2:	23f8      	movs	r3, #248	; 0xf8
 8000ce4:	613b      	str	r3, [r7, #16]
                          |SS1_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_GPIO_Init+0x104>)
 8000cf6:	f000 fbd5 	bl	80014a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3720      	adds	r7, #32
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40011000 	.word	0x40011000
 8000d0c:	40010c00 	.word	0x40010c00
 8000d10:	40010800 	.word	0x40010800

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_MspInit+0x5c>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <HAL_MspInit+0x5c>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6193      	str	r3, [r2, #24]
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_MspInit+0x5c>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_MspInit+0x5c>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <HAL_MspInit+0x5c>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	61d3      	str	r3, [r2, #28]
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_MspInit+0x5c>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_MspInit+0x60>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_MspInit+0x60>)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010000 	.word	0x40010000

08000d84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d94:	d10b      	bne.n	8000dae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_TIM_Base_MspInit+0x34>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_TIM_Base_MspInit+0x34>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_TIM_Base_MspInit+0x34>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dda:	d117      	bne.n	8000e0c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_TIM_MspPostInit+0x58>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <HAL_TIM_MspPostInit+0x58>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_TIM_MspPostInit+0x58>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = SERVO1_PIN_Pin|SERVO2_PIN_Pin;
 8000df4:	2303      	movs	r3, #3
 8000df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	4804      	ldr	r0, [pc, #16]	; (8000e18 <HAL_TIM_MspPostInit+0x5c>)
 8000e08:	f000 fb4c 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010800 	.word	0x40010800

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a3f      	ldr	r2, [pc, #252]	; (8000f34 <HAL_UART_MspInit+0x118>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d138      	bne.n	8000eae <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e3c:	4b3e      	ldr	r3, [pc, #248]	; (8000f38 <HAL_UART_MspInit+0x11c>)
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	4a3d      	ldr	r2, [pc, #244]	; (8000f38 <HAL_UART_MspInit+0x11c>)
 8000e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e46:	61d3      	str	r3, [r2, #28]
 8000e48:	4b3b      	ldr	r3, [pc, #236]	; (8000f38 <HAL_UART_MspInit+0x11c>)
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <HAL_UART_MspInit+0x11c>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a37      	ldr	r2, [pc, #220]	; (8000f38 <HAL_UART_MspInit+0x11c>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <HAL_UART_MspInit+0x11c>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	482f      	ldr	r0, [pc, #188]	; (8000f3c <HAL_UART_MspInit+0x120>)
 8000e80:	f000 fb10 	bl	80014a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e84:	2308      	movs	r3, #8
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4829      	ldr	r0, [pc, #164]	; (8000f3c <HAL_UART_MspInit+0x120>)
 8000e98:	f000 fb04 	bl	80014a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2026      	movs	r0, #38	; 0x26
 8000ea2:	f000 fa16 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ea6:	2026      	movs	r0, #38	; 0x26
 8000ea8:	f000 fa2f 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eac:	e03e      	b.n	8000f2c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART3)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a23      	ldr	r2, [pc, #140]	; (8000f40 <HAL_UART_MspInit+0x124>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d139      	bne.n	8000f2c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <HAL_UART_MspInit+0x11c>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <HAL_UART_MspInit+0x11c>)
 8000ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec2:	61d3      	str	r3, [r2, #28]
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_UART_MspInit+0x11c>)
 8000ec6:	69db      	ldr	r3, [r3, #28]
 8000ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_UART_MspInit+0x11c>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <HAL_UART_MspInit+0x11c>)
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_UART_MspInit+0x11c>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0318 	add.w	r3, r7, #24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4811      	ldr	r0, [pc, #68]	; (8000f44 <HAL_UART_MspInit+0x128>)
 8000efe:	f000 fad1 	bl	80014a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin;
 8000f02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(USART3_RX_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0318 	add.w	r3, r7, #24
 8000f14:	4619      	mov	r1, r3
 8000f16:	480b      	ldr	r0, [pc, #44]	; (8000f44 <HAL_UART_MspInit+0x128>)
 8000f18:	f000 fac4 	bl	80014a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2027      	movs	r0, #39	; 0x27
 8000f22:	f000 f9d6 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f26:	2027      	movs	r0, #39	; 0x27
 8000f28:	f000 f9ef 	bl	800130a <HAL_NVIC_EnableIRQ>
}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40004400 	.word	0x40004400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40004800 	.word	0x40004800
 8000f44:	40010c00 	.word	0x40010c00

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f4c:	e7fe      	b.n	8000f4c <NMI_Handler+0x4>

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8e:	f000 f889 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <USART2_IRQHandler+0x10>)
 8000f9e:	f001 ffe7 	bl	8002f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000238 	.word	0x20000238

08000fac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <USART3_IRQHandler+0x10>)
 8000fb2:	f001 ffdd 	bl	8002f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000280 	.word	0x20000280

08000fc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fcc:	f7ff fff8 	bl	8000fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fd2:	490c      	ldr	r1, [pc, #48]	; (8001004 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a09      	ldr	r2, [pc, #36]	; (800100c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fe8:	4c09      	ldr	r4, [pc, #36]	; (8001010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f002 fd43 	bl	8003a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ffa:	f7ff fca9 	bl	8000950 <main>
  bx lr
 8000ffe:	4770      	bx	lr
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001008:	08003b44 	.word	0x08003b44
  ldr r2, =_sbss
 800100c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001010:	200002cc 	.word	0x200002cc

08001014 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC1_2_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_Init+0x28>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_Init+0x28>)
 8001022:	f043 0310 	orr.w	r3, r3, #16
 8001026:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 f947 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102e:	200f      	movs	r0, #15
 8001030:	f000 f808 	bl	8001044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001034:	f7ff fe74 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40022000 	.word	0x40022000

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x54>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_InitTick+0x58>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	fbb3 f3f1 	udiv	r3, r3, r1
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f95f 	bl	8001326 <HAL_SYSTICK_Config>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e00e      	b.n	8001090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d80a      	bhi.n	800108e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f000 f927 	bl	80012d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <HAL_InitTick+0x5c>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000004 	.word	0x20000004
 800109c:	2000000c 	.word	0x2000000c
 80010a0:	20000008 	.word	0x20000008

080010a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_IncTick+0x1c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_IncTick+0x20>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a03      	ldr	r2, [pc, #12]	; (80010c4 <HAL_IncTick+0x20>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	2000000c 	.word	0x2000000c
 80010c4:	200002c8 	.word	0x200002c8

080010c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <HAL_GetTick+0x10>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	200002c8 	.word	0x200002c8

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff fff0 	bl	80010c8 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_Delay+0x44>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001102:	bf00      	nop
 8001104:	f7ff ffe0 	bl	80010c8 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000000c 	.word	0x2000000c

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4906      	ldr	r1, [pc, #24]	; (80011bc <__NVIC_EnableIRQ+0x34>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001288:	d301      	bcc.n	800128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <SysTick_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001296:	210f      	movs	r1, #15
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f7ff ff90 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <SysTick_Config+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SysTick_Config+0x40>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff2d 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff42 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff90 	bl	8001214 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5f 	bl	80011c0 <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff35 	bl	8001188 <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffa2 	bl	8001278 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d008      	beq.n	8001368 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2204      	movs	r2, #4
 800135a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e020      	b.n	80013aa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 020e 	bic.w	r2, r2, #14
 8001376:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001390:	2101      	movs	r1, #1
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d005      	beq.n	80013d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2204      	movs	r2, #4
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e051      	b.n	800147c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 020e 	bic.w	r2, r2, #14
 80013e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a22      	ldr	r2, [pc, #136]	; (8001488 <HAL_DMA_Abort_IT+0xd4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d029      	beq.n	8001456 <HAL_DMA_Abort_IT+0xa2>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a21      	ldr	r2, [pc, #132]	; (800148c <HAL_DMA_Abort_IT+0xd8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d022      	beq.n	8001452 <HAL_DMA_Abort_IT+0x9e>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a1f      	ldr	r2, [pc, #124]	; (8001490 <HAL_DMA_Abort_IT+0xdc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d01a      	beq.n	800144c <HAL_DMA_Abort_IT+0x98>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <HAL_DMA_Abort_IT+0xe0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d012      	beq.n	8001446 <HAL_DMA_Abort_IT+0x92>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <HAL_DMA_Abort_IT+0xe4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00a      	beq.n	8001440 <HAL_DMA_Abort_IT+0x8c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a1b      	ldr	r2, [pc, #108]	; (800149c <HAL_DMA_Abort_IT+0xe8>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d102      	bne.n	800143a <HAL_DMA_Abort_IT+0x86>
 8001434:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001438:	e00e      	b.n	8001458 <HAL_DMA_Abort_IT+0xa4>
 800143a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800143e:	e00b      	b.n	8001458 <HAL_DMA_Abort_IT+0xa4>
 8001440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001444:	e008      	b.n	8001458 <HAL_DMA_Abort_IT+0xa4>
 8001446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144a:	e005      	b.n	8001458 <HAL_DMA_Abort_IT+0xa4>
 800144c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001450:	e002      	b.n	8001458 <HAL_DMA_Abort_IT+0xa4>
 8001452:	2310      	movs	r3, #16
 8001454:	e000      	b.n	8001458 <HAL_DMA_Abort_IT+0xa4>
 8001456:	2301      	movs	r3, #1
 8001458:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <HAL_DMA_Abort_IT+0xec>)
 800145a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	4798      	blx	r3
    } 
  }
  return status;
 800147c:	7bfb      	ldrb	r3, [r7, #15]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40020008 	.word	0x40020008
 800148c:	4002001c 	.word	0x4002001c
 8001490:	40020030 	.word	0x40020030
 8001494:	40020044 	.word	0x40020044
 8001498:	40020058 	.word	0x40020058
 800149c:	4002006c 	.word	0x4002006c
 80014a0:	40020000 	.word	0x40020000

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b08b      	sub	sp, #44	; 0x2c
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	e169      	b.n	800178c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b8:	2201      	movs	r2, #1
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8158 	bne.w	8001786 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a9a      	ldr	r2, [pc, #616]	; (8001744 <HAL_GPIO_Init+0x2a0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d05e      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014e0:	4a98      	ldr	r2, [pc, #608]	; (8001744 <HAL_GPIO_Init+0x2a0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d875      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014e6:	4a98      	ldr	r2, [pc, #608]	; (8001748 <HAL_GPIO_Init+0x2a4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d058      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014ec:	4a96      	ldr	r2, [pc, #600]	; (8001748 <HAL_GPIO_Init+0x2a4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d86f      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014f2:	4a96      	ldr	r2, [pc, #600]	; (800174c <HAL_GPIO_Init+0x2a8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d052      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014f8:	4a94      	ldr	r2, [pc, #592]	; (800174c <HAL_GPIO_Init+0x2a8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d869      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014fe:	4a94      	ldr	r2, [pc, #592]	; (8001750 <HAL_GPIO_Init+0x2ac>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d04c      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001504:	4a92      	ldr	r2, [pc, #584]	; (8001750 <HAL_GPIO_Init+0x2ac>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d863      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800150a:	4a92      	ldr	r2, [pc, #584]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d046      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001510:	4a90      	ldr	r2, [pc, #576]	; (8001754 <HAL_GPIO_Init+0x2b0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d85d      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 8001516:	2b12      	cmp	r3, #18
 8001518:	d82a      	bhi.n	8001570 <HAL_GPIO_Init+0xcc>
 800151a:	2b12      	cmp	r3, #18
 800151c:	d859      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <HAL_GPIO_Init+0x80>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	0800159f 	.word	0x0800159f
 8001528:	08001579 	.word	0x08001579
 800152c:	0800158b 	.word	0x0800158b
 8001530:	080015cd 	.word	0x080015cd
 8001534:	080015d3 	.word	0x080015d3
 8001538:	080015d3 	.word	0x080015d3
 800153c:	080015d3 	.word	0x080015d3
 8001540:	080015d3 	.word	0x080015d3
 8001544:	080015d3 	.word	0x080015d3
 8001548:	080015d3 	.word	0x080015d3
 800154c:	080015d3 	.word	0x080015d3
 8001550:	080015d3 	.word	0x080015d3
 8001554:	080015d3 	.word	0x080015d3
 8001558:	080015d3 	.word	0x080015d3
 800155c:	080015d3 	.word	0x080015d3
 8001560:	080015d3 	.word	0x080015d3
 8001564:	080015d3 	.word	0x080015d3
 8001568:	08001581 	.word	0x08001581
 800156c:	08001595 	.word	0x08001595
 8001570:	4a79      	ldr	r2, [pc, #484]	; (8001758 <HAL_GPIO_Init+0x2b4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001576:	e02c      	b.n	80015d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	623b      	str	r3, [r7, #32]
          break;
 800157e:	e029      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	3304      	adds	r3, #4
 8001586:	623b      	str	r3, [r7, #32]
          break;
 8001588:	e024      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	3308      	adds	r3, #8
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e01f      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	330c      	adds	r3, #12
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e01a      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015a6:	2304      	movs	r3, #4
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e013      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d105      	bne.n	80015c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	611a      	str	r2, [r3, #16]
          break;
 80015be:	e009      	b.n	80015d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c0:	2308      	movs	r3, #8
 80015c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	615a      	str	r2, [r3, #20]
          break;
 80015ca:	e003      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          break;
 80015d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2bff      	cmp	r3, #255	; 0xff
 80015d8:	d801      	bhi.n	80015de <HAL_GPIO_Init+0x13a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	e001      	b.n	80015e2 <HAL_GPIO_Init+0x13e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3304      	adds	r3, #4
 80015e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	d802      	bhi.n	80015f0 <HAL_GPIO_Init+0x14c>
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	e002      	b.n	80015f6 <HAL_GPIO_Init+0x152>
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	3b08      	subs	r3, #8
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	210f      	movs	r1, #15
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	401a      	ands	r2, r3
 8001608:	6a39      	ldr	r1, [r7, #32]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80b1 	beq.w	8001786 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001624:	4b4d      	ldr	r3, [pc, #308]	; (800175c <HAL_GPIO_Init+0x2b8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a4c      	ldr	r2, [pc, #304]	; (800175c <HAL_GPIO_Init+0x2b8>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_GPIO_Init+0x2b8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800163c:	4a48      	ldr	r2, [pc, #288]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a40      	ldr	r2, [pc, #256]	; (8001764 <HAL_GPIO_Init+0x2c0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d013      	beq.n	8001690 <HAL_GPIO_Init+0x1ec>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a3f      	ldr	r2, [pc, #252]	; (8001768 <HAL_GPIO_Init+0x2c4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d00d      	beq.n	800168c <HAL_GPIO_Init+0x1e8>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a3e      	ldr	r2, [pc, #248]	; (800176c <HAL_GPIO_Init+0x2c8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d007      	beq.n	8001688 <HAL_GPIO_Init+0x1e4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a3d      	ldr	r2, [pc, #244]	; (8001770 <HAL_GPIO_Init+0x2cc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_GPIO_Init+0x1e0>
 8001680:	2303      	movs	r3, #3
 8001682:	e006      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001684:	2304      	movs	r3, #4
 8001686:	e004      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001688:	2302      	movs	r3, #2
 800168a:	e002      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_GPIO_Init+0x1ee>
 8001690:	2300      	movs	r3, #0
 8001692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001694:	f002 0203 	and.w	r2, r2, #3
 8001698:	0092      	lsls	r2, r2, #2
 800169a:	4093      	lsls	r3, r2
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016a2:	492f      	ldr	r1, [pc, #188]	; (8001760 <HAL_GPIO_Init+0x2bc>)
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	492c      	ldr	r1, [pc, #176]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4928      	ldr	r1, [pc, #160]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	4922      	ldr	r1, [pc, #136]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	60cb      	str	r3, [r1, #12]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	491e      	ldr	r1, [pc, #120]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4918      	ldr	r1, [pc, #96]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	43db      	mvns	r3, r3
 8001722:	4914      	ldr	r1, [pc, #80]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 8001724:	4013      	ands	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d021      	beq.n	8001778 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	490e      	ldr	r1, [pc, #56]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	e021      	b.n	8001786 <HAL_GPIO_Init+0x2e2>
 8001742:	bf00      	nop
 8001744:	10320000 	.word	0x10320000
 8001748:	10310000 	.word	0x10310000
 800174c:	10220000 	.word	0x10220000
 8001750:	10210000 	.word	0x10210000
 8001754:	10120000 	.word	0x10120000
 8001758:	10110000 	.word	0x10110000
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000
 8001764:	40010800 	.word	0x40010800
 8001768:	40010c00 	.word	0x40010c00
 800176c:	40011000 	.word	0x40011000
 8001770:	40011400 	.word	0x40011400
 8001774:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_GPIO_Init+0x304>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	43db      	mvns	r3, r3
 8001780:	4909      	ldr	r1, [pc, #36]	; (80017a8 <HAL_GPIO_Init+0x304>)
 8001782:	4013      	ands	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	3301      	adds	r3, #1
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	fa22 f303 	lsr.w	r3, r2, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	f47f ae8e 	bne.w	80014b8 <HAL_GPIO_Init+0x14>
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	372c      	adds	r7, #44	; 0x2c
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40010400 	.word	0x40010400

080017ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e001      	b.n	80017ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ea:	787b      	ldrb	r3, [r7, #1]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f0:	887a      	ldrh	r2, [r7, #2]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017f6:	e003      	b.n	8001800 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	041a      	lsls	r2, r3, #16
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	611a      	str	r2, [r3, #16]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
	...

0800180c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e272      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8087 	beq.w	800193a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800182c:	4b92      	ldr	r3, [pc, #584]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b04      	cmp	r3, #4
 8001836:	d00c      	beq.n	8001852 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001838:	4b8f      	ldr	r3, [pc, #572]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b08      	cmp	r3, #8
 8001842:	d112      	bne.n	800186a <HAL_RCC_OscConfig+0x5e>
 8001844:	4b8c      	ldr	r3, [pc, #560]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d10b      	bne.n	800186a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001852:	4b89      	ldr	r3, [pc, #548]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d06c      	beq.n	8001938 <HAL_RCC_OscConfig+0x12c>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d168      	bne.n	8001938 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e24c      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x76>
 8001874:	4b80      	ldr	r3, [pc, #512]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a7f      	ldr	r2, [pc, #508]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e02e      	b.n	80018e0 <HAL_RCC_OscConfig+0xd4>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x98>
 800188a:	4b7b      	ldr	r3, [pc, #492]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a7a      	ldr	r2, [pc, #488]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b78      	ldr	r3, [pc, #480]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a77      	ldr	r2, [pc, #476]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800189c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e01d      	b.n	80018e0 <HAL_RCC_OscConfig+0xd4>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0xbc>
 80018ae:	4b72      	ldr	r3, [pc, #456]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a71      	ldr	r2, [pc, #452]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b6f      	ldr	r3, [pc, #444]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6e      	ldr	r2, [pc, #440]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0xd4>
 80018c8:	4b6b      	ldr	r3, [pc, #428]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a6a      	ldr	r2, [pc, #424]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b68      	ldr	r3, [pc, #416]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a67      	ldr	r2, [pc, #412]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fbee 	bl	80010c8 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff fbea 	bl	80010c8 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e200      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0xe4>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fbda 	bl	80010c8 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fbd6 	bl	80010c8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1ec      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x10c>
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d063      	beq.n	8001a0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001946:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001952:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b08      	cmp	r3, #8
 800195c:	d11c      	bne.n	8001998 <HAL_RCC_OscConfig+0x18c>
 800195e:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d116      	bne.n	8001998 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_RCC_OscConfig+0x176>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d001      	beq.n	8001982 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e1c0      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4939      	ldr	r1, [pc, #228]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001996:	e03a      	b.n	8001a0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d020      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a0:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7ff fb8f 	bl	80010c8 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fb8b 	bl	80010c8 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e1a1      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4927      	ldr	r1, [pc, #156]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
 80019e0:	e015      	b.n	8001a0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <HAL_RCC_OscConfig+0x270>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fb6e 	bl	80010c8 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f0:	f7ff fb6a 	bl	80010c8 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e180      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d03a      	beq.n	8001a90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d019      	beq.n	8001a56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a28:	f7ff fb4e 	bl	80010c8 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff fb4a 	bl	80010c8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e160      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f000 face 	bl	8001ff0 <RCC_Delay>
 8001a54:	e01c      	b.n	8001a90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fb34 	bl	80010c8 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a62:	e00f      	b.n	8001a84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff fb30 	bl	80010c8 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d908      	bls.n	8001a84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e146      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	42420000 	.word	0x42420000
 8001a80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1e9      	bne.n	8001a64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80a6 	beq.w	8001bea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa2:	4b8b      	ldr	r3, [pc, #556]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10d      	bne.n	8001aca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b88      	ldr	r3, [pc, #544]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a87      	ldr	r2, [pc, #540]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b85      	ldr	r3, [pc, #532]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	4b82      	ldr	r3, [pc, #520]	; (8001cd4 <HAL_RCC_OscConfig+0x4c8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d118      	bne.n	8001b08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad6:	4b7f      	ldr	r3, [pc, #508]	; (8001cd4 <HAL_RCC_OscConfig+0x4c8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a7e      	ldr	r2, [pc, #504]	; (8001cd4 <HAL_RCC_OscConfig+0x4c8>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff faf1 	bl	80010c8 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aea:	f7ff faed 	bl	80010c8 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b64      	cmp	r3, #100	; 0x64
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e103      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b75      	ldr	r3, [pc, #468]	; (8001cd4 <HAL_RCC_OscConfig+0x4c8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x312>
 8001b10:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4a6e      	ldr	r2, [pc, #440]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6213      	str	r3, [r2, #32]
 8001b1c:	e02d      	b.n	8001b7a <HAL_RCC_OscConfig+0x36e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x334>
 8001b26:	4b6a      	ldr	r3, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4a69      	ldr	r2, [pc, #420]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	6213      	str	r3, [r2, #32]
 8001b32:	4b67      	ldr	r3, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a66      	ldr	r2, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	f023 0304 	bic.w	r3, r3, #4
 8001b3c:	6213      	str	r3, [r2, #32]
 8001b3e:	e01c      	b.n	8001b7a <HAL_RCC_OscConfig+0x36e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	d10c      	bne.n	8001b62 <HAL_RCC_OscConfig+0x356>
 8001b48:	4b61      	ldr	r3, [pc, #388]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a60      	ldr	r2, [pc, #384]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	4b5e      	ldr	r3, [pc, #376]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a5d      	ldr	r2, [pc, #372]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6213      	str	r3, [r2, #32]
 8001b60:	e00b      	b.n	8001b7a <HAL_RCC_OscConfig+0x36e>
 8001b62:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a5a      	ldr	r2, [pc, #360]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	6213      	str	r3, [r2, #32]
 8001b6e:	4b58      	ldr	r3, [pc, #352]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a57      	ldr	r2, [pc, #348]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	f023 0304 	bic.w	r3, r3, #4
 8001b78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d015      	beq.n	8001bae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b82:	f7ff faa1 	bl	80010c8 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7ff fa9d 	bl	80010c8 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e0b1      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba0:	4b4b      	ldr	r3, [pc, #300]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ee      	beq.n	8001b8a <HAL_RCC_OscConfig+0x37e>
 8001bac:	e014      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bae:	f7ff fa8b 	bl	80010c8 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7ff fa87 	bl	80010c8 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e09b      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bcc:	4b40      	ldr	r3, [pc, #256]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ee      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d105      	bne.n	8001bea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bde:	4b3c      	ldr	r3, [pc, #240]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a3b      	ldr	r2, [pc, #236]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8087 	beq.w	8001d02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf4:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d061      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d146      	bne.n	8001c96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c08:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <HAL_RCC_OscConfig+0x4cc>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff fa5b 	bl	80010c8 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff fa57 	bl	80010c8 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e06d      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3c:	d108      	bne.n	8001c50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	4921      	ldr	r1, [pc, #132]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a19      	ldr	r1, [r3, #32]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	430b      	orrs	r3, r1
 8001c62:	491b      	ldr	r1, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x4cc>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fa2b 	bl	80010c8 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c76:	f7ff fa27 	bl	80010c8 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e03d      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x46a>
 8001c94:	e035      	b.n	8001d02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_RCC_OscConfig+0x4cc>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fa14 	bl	80010c8 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff fa10 	bl	80010c8 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e026      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x498>
 8001cc2:	e01e      	b.n	8001d02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e019      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_OscConfig+0x500>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000

08001d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0d0      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d24:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d910      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b67      	ldr	r3, [pc, #412]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
 8001d3a:	4965      	ldr	r1, [pc, #404]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0b8      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d6c:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d84:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a52      	ldr	r2, [pc, #328]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	494d      	ldr	r1, [pc, #308]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d040      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d115      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e07f      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e073      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06b      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4936      	ldr	r1, [pc, #216]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e00:	f7ff f962 	bl	80010c8 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7ff f95e 	bl	80010c8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e053      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d210      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 0207 	bic.w	r2, r3, #7
 8001e46:	4922      	ldr	r1, [pc, #136]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e032      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4916      	ldr	r1, [pc, #88]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	490e      	ldr	r1, [pc, #56]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e9e:	f000 f821 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	490a      	ldr	r1, [pc, #40]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb0:	5ccb      	ldrb	r3, [r1, r3]
 8001eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x1cc>)
 8001eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_RCC_ClockConfig+0x1d0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f8c0 	bl	8001044 <HAL_InitTick>

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40022000 	.word	0x40022000
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08003b10 	.word	0x08003b10
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	20000008 	.word	0x20000008

08001ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d002      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x30>
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d003      	beq.n	8001f1a <HAL_RCC_GetSysClockFreq+0x36>
 8001f12:	e027      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f16:	613b      	str	r3, [r7, #16]
      break;
 8001f18:	e027      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	0c9b      	lsrs	r3, r3, #18
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f24:	5cd3      	ldrb	r3, [r2, r3]
 8001f26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d010      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	0c5b      	lsrs	r3, r3, #17
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f46:	fb03 f202 	mul.w	r2, r3, r2
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e004      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	613b      	str	r3, [r7, #16]
      break;
 8001f62:	e002      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001f66:	613b      	str	r3, [r7, #16]
      break;
 8001f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6a:	693b      	ldr	r3, [r7, #16]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	007a1200 	.word	0x007a1200
 8001f80:	08003b28 	.word	0x08003b28
 8001f84:	08003b38 	.word	0x08003b38
 8001f88:	003d0900 	.word	0x003d0900

08001f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa4:	f7ff fff2 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4903      	ldr	r1, [pc, #12]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08003b20 	.word	0x08003b20

08001fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fcc:	f7ff ffde 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	0adb      	lsrs	r3, r3, #11
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	; (8001fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08003b20 	.word	0x08003b20

08001ff0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <RCC_Delay+0x34>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <RCC_Delay+0x38>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	0a5b      	lsrs	r3, r3, #9
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800200c:	bf00      	nop
  }
  while (Delay --);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1e5a      	subs	r2, r3, #1
 8002012:	60fa      	str	r2, [r7, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f9      	bne.n	800200c <RCC_Delay+0x1c>
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	20000004 	.word	0x20000004
 8002028:	10624dd3 	.word	0x10624dd3

0800202c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e041      	b.n	80020c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fe96 	bl	8000d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3304      	adds	r3, #4
 8002068:	4619      	mov	r1, r3
 800206a:	4610      	mov	r0, r2
 800206c:	f000 faf4 	bl	8002658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e041      	b.n	8002160 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d106      	bne.n	80020f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f839 	bl	8002168 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3304      	adds	r3, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4610      	mov	r0, r2
 800210a:	f000 faa5 	bl	8002658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
	...

0800217c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_TIM_PWM_Start+0x24>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	e022      	b.n	80021e6 <HAL_TIM_PWM_Start+0x6a>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d109      	bne.n	80021ba <HAL_TIM_PWM_Start+0x3e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	bf14      	ite	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	2300      	moveq	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	e015      	b.n	80021e6 <HAL_TIM_PWM_Start+0x6a>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d109      	bne.n	80021d4 <HAL_TIM_PWM_Start+0x58>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e008      	b.n	80021e6 <HAL_TIM_PWM_Start+0x6a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e05e      	b.n	80022ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d104      	bne.n	80021fe <HAL_TIM_PWM_Start+0x82>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021fc:	e013      	b.n	8002226 <HAL_TIM_PWM_Start+0xaa>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d104      	bne.n	800220e <HAL_TIM_PWM_Start+0x92>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800220c:	e00b      	b.n	8002226 <HAL_TIM_PWM_Start+0xaa>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d104      	bne.n	800221e <HAL_TIM_PWM_Start+0xa2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800221c:	e003      	b.n	8002226 <HAL_TIM_PWM_Start+0xaa>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2201      	movs	r2, #1
 800222c:	6839      	ldr	r1, [r7, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fd23 	bl	8002c7a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_TIM_PWM_Start+0x138>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d107      	bne.n	800224e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <HAL_TIM_PWM_Start+0x138>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00e      	beq.n	8002276 <HAL_TIM_PWM_Start+0xfa>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002260:	d009      	beq.n	8002276 <HAL_TIM_PWM_Start+0xfa>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <HAL_TIM_PWM_Start+0x13c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_TIM_PWM_Start+0xfa>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a12      	ldr	r2, [pc, #72]	; (80022bc <HAL_TIM_PWM_Start+0x140>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d111      	bne.n	800229a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d010      	beq.n	80022aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002298:	e007      	b.n	80022aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800

080022c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0ae      	b.n	800243c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	f200 809f 	bhi.w	800242c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022ee:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f4:	08002329 	.word	0x08002329
 80022f8:	0800242d 	.word	0x0800242d
 80022fc:	0800242d 	.word	0x0800242d
 8002300:	0800242d 	.word	0x0800242d
 8002304:	08002369 	.word	0x08002369
 8002308:	0800242d 	.word	0x0800242d
 800230c:	0800242d 	.word	0x0800242d
 8002310:	0800242d 	.word	0x0800242d
 8002314:	080023ab 	.word	0x080023ab
 8002318:	0800242d 	.word	0x0800242d
 800231c:	0800242d 	.word	0x0800242d
 8002320:	0800242d 	.word	0x0800242d
 8002324:	080023eb 	.word	0x080023eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f9f4 	bl	800271c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0208 	orr.w	r2, r2, #8
 8002342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0204 	bic.w	r2, r2, #4
 8002352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6999      	ldr	r1, [r3, #24]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	619a      	str	r2, [r3, #24]
      break;
 8002366:	e064      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fa3a 	bl	80027e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6999      	ldr	r1, [r3, #24]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	021a      	lsls	r2, r3, #8
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	619a      	str	r2, [r3, #24]
      break;
 80023a8:	e043      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fa83 	bl	80028bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0208 	orr.w	r2, r2, #8
 80023c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0204 	bic.w	r2, r2, #4
 80023d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69d9      	ldr	r1, [r3, #28]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	61da      	str	r2, [r3, #28]
      break;
 80023e8:	e023      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 facd 	bl	8002990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69d9      	ldr	r1, [r3, #28]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	021a      	lsls	r2, r3, #8
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	61da      	str	r2, [r3, #28]
      break;
 800242a:	e002      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	75fb      	strb	r3, [r7, #23]
      break;
 8002430:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800243a:	7dfb      	ldrb	r3, [r7, #23]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_TIM_ConfigClockSource+0x1c>
 800245c:	2302      	movs	r3, #2
 800245e:	e0b4      	b.n	80025ca <HAL_TIM_ConfigClockSource+0x186>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800247e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002498:	d03e      	beq.n	8002518 <HAL_TIM_ConfigClockSource+0xd4>
 800249a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249e:	f200 8087 	bhi.w	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a6:	f000 8086 	beq.w	80025b6 <HAL_TIM_ConfigClockSource+0x172>
 80024aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ae:	d87f      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024b0:	2b70      	cmp	r3, #112	; 0x70
 80024b2:	d01a      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0xa6>
 80024b4:	2b70      	cmp	r3, #112	; 0x70
 80024b6:	d87b      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024b8:	2b60      	cmp	r3, #96	; 0x60
 80024ba:	d050      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x11a>
 80024bc:	2b60      	cmp	r3, #96	; 0x60
 80024be:	d877      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024c0:	2b50      	cmp	r3, #80	; 0x50
 80024c2:	d03c      	beq.n	800253e <HAL_TIM_ConfigClockSource+0xfa>
 80024c4:	2b50      	cmp	r3, #80	; 0x50
 80024c6:	d873      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d058      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x13a>
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d86f      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d0:	2b30      	cmp	r3, #48	; 0x30
 80024d2:	d064      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x15a>
 80024d4:	2b30      	cmp	r3, #48	; 0x30
 80024d6:	d86b      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d060      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x15a>
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d867      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d05c      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x15a>
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d05a      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x15a>
 80024e8:	e062      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024fa:	f000 fb9f 	bl	8002c3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800250c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	609a      	str	r2, [r3, #8]
      break;
 8002516:	e04f      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002528:	f000 fb88 	bl	8002c3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800253a:	609a      	str	r2, [r3, #8]
      break;
 800253c:	e03c      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800254a:	461a      	mov	r2, r3
 800254c:	f000 faff 	bl	8002b4e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2150      	movs	r1, #80	; 0x50
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fb56 	bl	8002c08 <TIM_ITRx_SetConfig>
      break;
 800255c:	e02c      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800256a:	461a      	mov	r2, r3
 800256c:	f000 fb1d 	bl	8002baa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2160      	movs	r1, #96	; 0x60
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fb46 	bl	8002c08 <TIM_ITRx_SetConfig>
      break;
 800257c:	e01c      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800258a:	461a      	mov	r2, r3
 800258c:	f000 fadf 	bl	8002b4e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2140      	movs	r1, #64	; 0x40
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fb36 	bl	8002c08 <TIM_ITRx_SetConfig>
      break;
 800259c:	e00c      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	4610      	mov	r0, r2
 80025aa:	f000 fb2d 	bl	8002c08 <TIM_ITRx_SetConfig>
      break;
 80025ae:	e003      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      break;
 80025b4:	e000      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_TIM_SlaveConfigSynchro+0x18>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e031      	b.n	800264e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80025fa:	6839      	ldr	r1, [r7, #0]
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fa15 	bl	8002a2c <TIM_SlaveTimer_SetConfig>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e018      	b.n	800264e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800263a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a29      	ldr	r2, [pc, #164]	; (8002710 <TIM_Base_SetConfig+0xb8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00b      	beq.n	8002688 <TIM_Base_SetConfig+0x30>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002676:	d007      	beq.n	8002688 <TIM_Base_SetConfig+0x30>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a26      	ldr	r2, [pc, #152]	; (8002714 <TIM_Base_SetConfig+0xbc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <TIM_Base_SetConfig+0x30>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a25      	ldr	r2, [pc, #148]	; (8002718 <TIM_Base_SetConfig+0xc0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d108      	bne.n	800269a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <TIM_Base_SetConfig+0xb8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00b      	beq.n	80026ba <TIM_Base_SetConfig+0x62>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a8:	d007      	beq.n	80026ba <TIM_Base_SetConfig+0x62>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <TIM_Base_SetConfig+0xbc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d003      	beq.n	80026ba <TIM_Base_SetConfig+0x62>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a18      	ldr	r2, [pc, #96]	; (8002718 <TIM_Base_SetConfig+0xc0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d108      	bne.n	80026cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a07      	ldr	r2, [pc, #28]	; (8002710 <TIM_Base_SetConfig+0xb8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d103      	bne.n	8002700 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	615a      	str	r2, [r3, #20]
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40000400 	.word	0x40000400
 8002718:	40000800 	.word	0x40000800

0800271c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f023 0201 	bic.w	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0303 	bic.w	r3, r3, #3
 8002752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f023 0302 	bic.w	r3, r3, #2
 8002764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <TIM_OC1_SetConfig+0xc8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d10c      	bne.n	8002792 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f023 0308 	bic.w	r3, r3, #8
 800277e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f023 0304 	bic.w	r3, r3, #4
 8002790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a13      	ldr	r2, [pc, #76]	; (80027e4 <TIM_OC1_SetConfig+0xc8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d111      	bne.n	80027be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	621a      	str	r2, [r3, #32]
}
 80027d8:	bf00      	nop
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40012c00 	.word	0x40012c00

080027e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f023 0210 	bic.w	r2, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f023 0320 	bic.w	r3, r3, #32
 8002832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <TIM_OC2_SetConfig+0xd0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d10d      	bne.n	8002864 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800284e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002862:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <TIM_OC2_SetConfig+0xd0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d113      	bne.n	8002894 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800287a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	621a      	str	r2, [r3, #32]
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	40012c00 	.word	0x40012c00

080028bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0303 	bic.w	r3, r3, #3
 80028f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1d      	ldr	r2, [pc, #116]	; (800298c <TIM_OC3_SetConfig+0xd0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d10d      	bne.n	8002936 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <TIM_OC3_SetConfig+0xd0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d113      	bne.n	8002966 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800294c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	621a      	str	r2, [r3, #32]
}
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40012c00 	.word	0x40012c00

08002990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	031b      	lsls	r3, r3, #12
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a0f      	ldr	r2, [pc, #60]	; (8002a28 <TIM_OC4_SetConfig+0x98>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d109      	bne.n	8002a04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	019b      	lsls	r3, r3, #6
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	621a      	str	r2, [r3, #32]
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	40012c00 	.word	0x40012c00

08002a2c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a48:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f023 0307 	bic.w	r3, r3, #7
 8002a5a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b70      	cmp	r3, #112	; 0x70
 8002a74:	d01a      	beq.n	8002aac <TIM_SlaveTimer_SetConfig+0x80>
 8002a76:	2b70      	cmp	r3, #112	; 0x70
 8002a78:	d860      	bhi.n	8002b3c <TIM_SlaveTimer_SetConfig+0x110>
 8002a7a:	2b60      	cmp	r3, #96	; 0x60
 8002a7c:	d054      	beq.n	8002b28 <TIM_SlaveTimer_SetConfig+0xfc>
 8002a7e:	2b60      	cmp	r3, #96	; 0x60
 8002a80:	d85c      	bhi.n	8002b3c <TIM_SlaveTimer_SetConfig+0x110>
 8002a82:	2b50      	cmp	r3, #80	; 0x50
 8002a84:	d046      	beq.n	8002b14 <TIM_SlaveTimer_SetConfig+0xe8>
 8002a86:	2b50      	cmp	r3, #80	; 0x50
 8002a88:	d858      	bhi.n	8002b3c <TIM_SlaveTimer_SetConfig+0x110>
 8002a8a:	2b40      	cmp	r3, #64	; 0x40
 8002a8c:	d019      	beq.n	8002ac2 <TIM_SlaveTimer_SetConfig+0x96>
 8002a8e:	2b40      	cmp	r3, #64	; 0x40
 8002a90:	d854      	bhi.n	8002b3c <TIM_SlaveTimer_SetConfig+0x110>
 8002a92:	2b30      	cmp	r3, #48	; 0x30
 8002a94:	d055      	beq.n	8002b42 <TIM_SlaveTimer_SetConfig+0x116>
 8002a96:	2b30      	cmp	r3, #48	; 0x30
 8002a98:	d850      	bhi.n	8002b3c <TIM_SlaveTimer_SetConfig+0x110>
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d051      	beq.n	8002b42 <TIM_SlaveTimer_SetConfig+0x116>
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d84c      	bhi.n	8002b3c <TIM_SlaveTimer_SetConfig+0x110>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d04d      	beq.n	8002b42 <TIM_SlaveTimer_SetConfig+0x116>
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d04b      	beq.n	8002b42 <TIM_SlaveTimer_SetConfig+0x116>
 8002aaa:	e047      	b.n	8002b3c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002abc:	f000 f8be 	bl	8002c3c <TIM_ETR_SetConfig>
      break;
 8002ac0:	e040      	b.n	8002b44 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d101      	bne.n	8002ace <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e03b      	b.n	8002b46 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0201 	bic.w	r2, r2, #1
 8002ae4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	621a      	str	r2, [r3, #32]
      break;
 8002b12:	e017      	b.n	8002b44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b20:	461a      	mov	r2, r3
 8002b22:	f000 f814 	bl	8002b4e <TIM_TI1_ConfigInputStage>
      break;
 8002b26:	e00d      	b.n	8002b44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b34:	461a      	mov	r2, r3
 8002b36:	f000 f838 	bl	8002baa <TIM_TI2_ConfigInputStage>
      break;
 8002b3a:	e003      	b.n	8002b44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b40:	e000      	b.n	8002b44 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002b42:	bf00      	nop
  }

  return status;
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b087      	sub	sp, #28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f023 0201 	bic.w	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f023 030a 	bic.w	r3, r3, #10
 8002b8a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	621a      	str	r2, [r3, #32]
}
 8002ba0:	bf00      	nop
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b087      	sub	sp, #28
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f023 0210 	bic.w	r2, r3, #16
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	031b      	lsls	r3, r3, #12
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002be6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f043 0307 	orr.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	609a      	str	r2, [r3, #8]
}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	021a      	lsls	r2, r3, #8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	609a      	str	r2, [r3, #8]
}
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b087      	sub	sp, #28
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1a      	ldr	r2, [r3, #32]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1a      	ldr	r2, [r3, #32]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	621a      	str	r2, [r3, #32]
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e046      	b.n	8002d6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00e      	beq.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d009      	beq.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a10      	ldr	r2, [pc, #64]	; (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10c      	bne.n	8002d58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800

08002d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e042      	b.n	8002e18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fe f838 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fdc5 	bl	8003954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d16d      	bne.n	8002f1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_UART_Transmit+0x2c>
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e066      	b.n	8002f1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2221      	movs	r2, #33	; 0x21
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e5e:	f7fe f933 	bl	80010c8 <HAL_GetTick>
 8002e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	88fa      	ldrh	r2, [r7, #6]
 8002e6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e78:	d108      	bne.n	8002e8c <HAL_UART_Transmit+0x6c>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d104      	bne.n	8002e8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	e003      	b.n	8002e94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e94:	e02a      	b.n	8002eec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fb14 	bl	80034ce <UART_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e036      	b.n	8002f1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10b      	bne.n	8002ece <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	3302      	adds	r3, #2
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	e007      	b.n	8002ede <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	781a      	ldrb	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	3301      	adds	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1cf      	bne.n	8002e96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2140      	movs	r1, #64	; 0x40
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fae4 	bl	80034ce <UART_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e006      	b.n	8002f1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	4613      	mov	r3, r2
 8002f32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d112      	bne.n	8002f66 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_UART_Receive_IT+0x26>
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e00b      	b.n	8002f68 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fb24 	bl	80035aa <UART_Start_Receive_IT>
 8002f62:	4603      	mov	r3, r0
 8002f64:	e000      	b.n	8002f68 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
  }
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b0ba      	sub	sp, #232	; 0xe8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10f      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x66>
 8002fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fc01 	bl	80037d6 <UART_Receive_IT>
      return;
 8002fd4:	e25b      	b.n	800348e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80de 	beq.w	800319c <HAL_UART_IRQHandler+0x22c>
 8002fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80d1 	beq.w	800319c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_UART_IRQHandler+0xae>
 8003006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800301e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00b      	beq.n	8003042 <HAL_UART_IRQHandler+0xd2>
 800302a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f043 0202 	orr.w	r2, r3, #2
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_UART_IRQHandler+0xf6>
 800304e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	f043 0204 	orr.w	r2, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d011      	beq.n	8003096 <HAL_UART_IRQHandler+0x126>
 8003072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d105      	bne.n	800308a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800307e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	f043 0208 	orr.w	r2, r3, #8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 81f2 	beq.w	8003484 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_UART_IRQHandler+0x14e>
 80030ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fb8c 	bl	80037d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <HAL_UART_IRQHandler+0x17a>
 80030e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d04f      	beq.n	800318a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa96 	bl	800361c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d041      	beq.n	8003182 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3314      	adds	r3, #20
 8003104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800311c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3314      	adds	r3, #20
 8003126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800312a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800312e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1d9      	bne.n	80030fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d013      	beq.n	800317a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	4a7e      	ldr	r2, [pc, #504]	; (8003350 <HAL_UART_IRQHandler+0x3e0>)
 8003158:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe f928 	bl	80013b4 <HAL_DMA_Abort_IT>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003174:	4610      	mov	r0, r2
 8003176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	e00e      	b.n	8003198 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f993 	bl	80034a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003180:	e00a      	b.n	8003198 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f98f 	bl	80034a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	e006      	b.n	8003198 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f98b 	bl	80034a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003196:	e175      	b.n	8003484 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	bf00      	nop
    return;
 800319a:	e173      	b.n	8003484 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	f040 814f 	bne.w	8003444 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8148 	beq.w	8003444 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 8141 	beq.w	8003444 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80b6 	beq.w	8003354 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8145 	beq.w	8003488 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003206:	429a      	cmp	r2, r3
 8003208:	f080 813e 	bcs.w	8003488 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003212:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b20      	cmp	r3, #32
 800321c:	f000 8088 	beq.w	8003330 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	330c      	adds	r3, #12
 8003226:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800322e:	e853 3f00 	ldrex	r3, [r3]
 8003232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003236:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800323a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800323e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800324c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003250:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003258:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003264:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1d9      	bne.n	8003220 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3314      	adds	r3, #20
 8003272:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800327c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3314      	adds	r3, #20
 800328c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003290:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003294:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003298:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800329c:	e841 2300 	strex	r3, r2, [r1]
 80032a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e1      	bne.n	800326c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3314      	adds	r3, #20
 80032ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032b2:	e853 3f00 	ldrex	r3, [r3]
 80032b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3314      	adds	r3, #20
 80032c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e3      	bne.n	80032a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	330c      	adds	r3, #12
 80032f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003300:	f023 0310 	bic.w	r3, r3, #16
 8003304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003312:	65ba      	str	r2, [r7, #88]	; 0x58
 8003314:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1e3      	bne.n	80032ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe f807 	bl	800133e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800333e:	b29b      	uxth	r3, r3
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	b29b      	uxth	r3, r3
 8003344:	4619      	mov	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8b6 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800334c:	e09c      	b.n	8003488 <HAL_UART_IRQHandler+0x518>
 800334e:	bf00      	nop
 8003350:	080036e1 	.word	0x080036e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800335c:	b29b      	uxth	r3, r3
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 808e 	beq.w	800348c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8089 	beq.w	800348c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800339e:	647a      	str	r2, [r7, #68]	; 0x44
 80033a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e3      	bne.n	800337a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3314      	adds	r3, #20
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	e853 3f00 	ldrex	r3, [r3]
 80033c0:	623b      	str	r3, [r7, #32]
   return(result);
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3314      	adds	r3, #20
 80033d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033d6:	633a      	str	r2, [r7, #48]	; 0x30
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e3      	bne.n	80033b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	60fb      	str	r3, [r7, #12]
   return(result);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0310 	bic.w	r3, r3, #16
 800340e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800341c:	61fa      	str	r2, [r7, #28]
 800341e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	69b9      	ldr	r1, [r7, #24]
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	617b      	str	r3, [r7, #20]
   return(result);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e3      	bne.n	80033f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003436:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800343a:	4619      	mov	r1, r3
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f83b 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003442:	e023      	b.n	800348c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <HAL_UART_IRQHandler+0x4f4>
 8003450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f953 	bl	8003708 <UART_Transmit_IT>
    return;
 8003462:	e014      	b.n	800348e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00e      	beq.n	800348e <HAL_UART_IRQHandler+0x51e>
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f992 	bl	80037a6 <UART_EndTransmit_IT>
    return;
 8003482:	e004      	b.n	800348e <HAL_UART_IRQHandler+0x51e>
    return;
 8003484:	bf00      	nop
 8003486:	e002      	b.n	800348e <HAL_UART_IRQHandler+0x51e>
      return;
 8003488:	bf00      	nop
 800348a:	e000      	b.n	800348e <HAL_UART_IRQHandler+0x51e>
      return;
 800348c:	bf00      	nop
  }
}
 800348e:	37e8      	adds	r7, #232	; 0xe8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b090      	sub	sp, #64	; 0x40
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034de:	e050      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d04c      	beq.n	8003582 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0x30>
 80034ee:	f7fd fdeb 	bl	80010c8 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d241      	bcs.n	8003582 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	330c      	adds	r3, #12
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800351e:	637a      	str	r2, [r7, #52]	; 0x34
 8003520:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e5      	bne.n	80034fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3314      	adds	r3, #20
 8003538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	613b      	str	r3, [r7, #16]
   return(result);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	63bb      	str	r3, [r7, #56]	; 0x38
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3314      	adds	r3, #20
 8003550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003552:	623a      	str	r2, [r7, #32]
 8003554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	69f9      	ldr	r1, [r7, #28]
 8003558:	6a3a      	ldr	r2, [r7, #32]
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e5      	bne.n	8003532 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e00f      	b.n	80035a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4013      	ands	r3, r2
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	429a      	cmp	r2, r3
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	429a      	cmp	r2, r3
 800359e:	d09f      	beq.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3740      	adds	r7, #64	; 0x40
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	4613      	mov	r3, r2
 80035b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	88fa      	ldrh	r2, [r7, #6]
 80035c2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2222      	movs	r2, #34	; 0x22
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0220 	orr.w	r2, r2, #32
 800360e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800361c:	b480      	push	{r7}
 800361e:	b095      	sub	sp, #84	; 0x54
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003644:	643a      	str	r2, [r7, #64]	; 0x40
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800364a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	61fb      	str	r3, [r7, #28]
   return(result);
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3314      	adds	r3, #20
 8003676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003678:	62fa      	str	r2, [r7, #44]	; 0x2c
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800367e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e5      	bne.n	8003658 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	2b01      	cmp	r3, #1
 8003692:	d119      	bne.n	80036c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	330c      	adds	r3, #12
 800369a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	e853 3f00 	ldrex	r3, [r3]
 80036a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f023 0310 	bic.w	r3, r3, #16
 80036aa:	647b      	str	r3, [r7, #68]	; 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	330c      	adds	r3, #12
 80036b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036b4:	61ba      	str	r2, [r7, #24]
 80036b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	6979      	ldr	r1, [r7, #20]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	e841 2300 	strex	r3, r2, [r1]
 80036c0:	613b      	str	r3, [r7, #16]
   return(result);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e5      	bne.n	8003694 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036d6:	bf00      	nop
 80036d8:	3754      	adds	r7, #84	; 0x54
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff fed3 	bl	80034a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b21      	cmp	r3, #33	; 0x21
 800371a:	d13e      	bne.n	800379a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003724:	d114      	bne.n	8003750 <UART_Transmit_IT+0x48>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d110      	bne.n	8003750 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003742:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	1c9a      	adds	r2, r3, #2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	621a      	str	r2, [r3, #32]
 800374e:	e008      	b.n	8003762 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	1c59      	adds	r1, r3, #1
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6211      	str	r1, [r2, #32]
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29b      	uxth	r3, r3
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4619      	mov	r1, r3
 8003770:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10f      	bne.n	8003796 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003784:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003794:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
  }
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr

080037a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff fe64 	bl	8003494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b08c      	sub	sp, #48	; 0x30
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b22      	cmp	r3, #34	; 0x22
 80037e8:	f040 80ae 	bne.w	8003948 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f4:	d117      	bne.n	8003826 <UART_Receive_IT+0x50>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d113      	bne.n	8003826 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b29b      	uxth	r3, r3
 8003810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003814:	b29a      	uxth	r2, r3
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	1c9a      	adds	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
 8003824:	e026      	b.n	8003874 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800382c:	2300      	movs	r3, #0
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003838:	d007      	beq.n	800384a <UART_Receive_IT+0x74>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <UART_Receive_IT+0x82>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	701a      	strb	r2, [r3, #0]
 8003856:	e008      	b.n	800386a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003864:	b2da      	uxtb	r2, r3
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29b      	uxth	r3, r3
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4619      	mov	r1, r3
 8003882:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003884:	2b00      	cmp	r3, #0
 8003886:	d15d      	bne.n	8003944 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0220 	bic.w	r2, r2, #32
 8003896:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0201 	bic.w	r2, r2, #1
 80038b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d135      	bne.n	800393a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	613b      	str	r3, [r7, #16]
   return(result);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f023 0310 	bic.w	r3, r3, #16
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f4:	623a      	str	r2, [r7, #32]
 80038f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	69f9      	ldr	r1, [r7, #28]
 80038fa:	6a3a      	ldr	r2, [r7, #32]
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	61bb      	str	r3, [r7, #24]
   return(result);
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e5      	bne.n	80038d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b10      	cmp	r3, #16
 8003914:	d10a      	bne.n	800392c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003930:	4619      	mov	r1, r3
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff fdc0 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
 8003938:	e002      	b.n	8003940 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fc fd76 	bl	800042c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e002      	b.n	800394a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e000      	b.n	800394a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
  }
}
 800394a:	4618      	mov	r0, r3
 800394c:	3730      	adds	r7, #48	; 0x30
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800398e:	f023 030c 	bic.w	r3, r3, #12
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	430b      	orrs	r3, r1
 800399a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2c      	ldr	r2, [pc, #176]	; (8003a68 <UART_SetConfig+0x114>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d103      	bne.n	80039c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039bc:	f7fe fb04 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	e002      	b.n	80039ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039c4:	f7fe faec 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 80039c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009a      	lsls	r2, r3, #2
 80039d4:	441a      	add	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	4a22      	ldr	r2, [pc, #136]	; (8003a6c <UART_SetConfig+0x118>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	0119      	lsls	r1, r3, #4
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009a      	lsls	r2, r3, #2
 80039f4:	441a      	add	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <UART_SetConfig+0x118>)
 8003a02:	fba3 0302 	umull	r0, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2064      	movs	r0, #100	; 0x64
 8003a0a:	fb00 f303 	mul.w	r3, r0, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	3332      	adds	r3, #50	; 0x32
 8003a14:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <UART_SetConfig+0x118>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a20:	4419      	add	r1, r3
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009a      	lsls	r2, r3, #2
 8003a2c:	441a      	add	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <UART_SetConfig+0x118>)
 8003a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	2064      	movs	r0, #100	; 0x64
 8003a42:	fb00 f303 	mul.w	r3, r0, r3
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	3332      	adds	r3, #50	; 0x32
 8003a4c:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <UART_SetConfig+0x118>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	f003 020f 	and.w	r2, r3, #15
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40013800 	.word	0x40013800
 8003a6c:	51eb851f 	.word	0x51eb851f

08003a70 <memset>:
 8003a70:	4603      	mov	r3, r0
 8003a72:	4402      	add	r2, r0
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d100      	bne.n	8003a7a <memset+0xa>
 8003a78:	4770      	bx	lr
 8003a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7e:	e7f9      	b.n	8003a74 <memset+0x4>

08003a80 <__libc_init_array>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	2600      	movs	r6, #0
 8003a84:	4d0c      	ldr	r5, [pc, #48]	; (8003ab8 <__libc_init_array+0x38>)
 8003a86:	4c0d      	ldr	r4, [pc, #52]	; (8003abc <__libc_init_array+0x3c>)
 8003a88:	1b64      	subs	r4, r4, r5
 8003a8a:	10a4      	asrs	r4, r4, #2
 8003a8c:	42a6      	cmp	r6, r4
 8003a8e:	d109      	bne.n	8003aa4 <__libc_init_array+0x24>
 8003a90:	f000 f81a 	bl	8003ac8 <_init>
 8003a94:	2600      	movs	r6, #0
 8003a96:	4d0a      	ldr	r5, [pc, #40]	; (8003ac0 <__libc_init_array+0x40>)
 8003a98:	4c0a      	ldr	r4, [pc, #40]	; (8003ac4 <__libc_init_array+0x44>)
 8003a9a:	1b64      	subs	r4, r4, r5
 8003a9c:	10a4      	asrs	r4, r4, #2
 8003a9e:	42a6      	cmp	r6, r4
 8003aa0:	d105      	bne.n	8003aae <__libc_init_array+0x2e>
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}
 8003aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa8:	4798      	blx	r3
 8003aaa:	3601      	adds	r6, #1
 8003aac:	e7ee      	b.n	8003a8c <__libc_init_array+0xc>
 8003aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab2:	4798      	blx	r3
 8003ab4:	3601      	adds	r6, #1
 8003ab6:	e7f2      	b.n	8003a9e <__libc_init_array+0x1e>
 8003ab8:	08003b3c 	.word	0x08003b3c
 8003abc:	08003b3c 	.word	0x08003b3c
 8003ac0:	08003b3c 	.word	0x08003b3c
 8003ac4:	08003b40 	.word	0x08003b40

08003ac8 <_init>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr

08003ad4 <_fini>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr
